/*
 * Account Recovery
 * This service domain handles the restructuring of a distressed account (loan) after standard recovery
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.accountrecovery.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQWritedownRetrieveOutputModelWritedownInstanceReport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-07T18:27:41.474305+02:00[Europe/Madrid]")
public class BQWritedownRetrieveOutputModelWritedownInstanceReport {
  @SerializedName("writedownInstanceReportRecord")
  private Object writedownInstanceReportRecord = null;

  @SerializedName("writedownInstanceReportType")
  private String writedownInstanceReportType = null;

  @SerializedName("writedownInstanceReportParameters")
  private String writedownInstanceReportParameters = null;

  @SerializedName("writedownInstanceReport")
  private Object writedownInstanceReport = null;

  public BQWritedownRetrieveOutputModelWritedownInstanceReport writedownInstanceReportRecord(Object writedownInstanceReportRecord) {
    this.writedownInstanceReportRecord = writedownInstanceReportRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected 
   * @return writedownInstanceReportRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected ")
  public Object getWritedownInstanceReportRecord() {
    return writedownInstanceReportRecord;
  }

  public void setWritedownInstanceReportRecord(Object writedownInstanceReportRecord) {
    this.writedownInstanceReportRecord = writedownInstanceReportRecord;
  }

  public BQWritedownRetrieveOutputModelWritedownInstanceReport writedownInstanceReportType(String writedownInstanceReportType) {
    this.writedownInstanceReportType = writedownInstanceReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available 
   * @return writedownInstanceReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available ")
  public String getWritedownInstanceReportType() {
    return writedownInstanceReportType;
  }

  public void setWritedownInstanceReportType(String writedownInstanceReportType) {
    this.writedownInstanceReportType = writedownInstanceReportType;
  }

  public BQWritedownRetrieveOutputModelWritedownInstanceReport writedownInstanceReportParameters(String writedownInstanceReportParameters) {
    this.writedownInstanceReportParameters = writedownInstanceReportParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) 
   * @return writedownInstanceReportParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) ")
  public String getWritedownInstanceReportParameters() {
    return writedownInstanceReportParameters;
  }

  public void setWritedownInstanceReportParameters(String writedownInstanceReportParameters) {
    this.writedownInstanceReportParameters = writedownInstanceReportParameters;
  }

  public BQWritedownRetrieveOutputModelWritedownInstanceReport writedownInstanceReport(Object writedownInstanceReport) {
    this.writedownInstanceReport = writedownInstanceReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate 
   * @return writedownInstanceReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate ")
  public Object getWritedownInstanceReport() {
    return writedownInstanceReport;
  }

  public void setWritedownInstanceReport(Object writedownInstanceReport) {
    this.writedownInstanceReport = writedownInstanceReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQWritedownRetrieveOutputModelWritedownInstanceReport bqWritedownRetrieveOutputModelWritedownInstanceReport = (BQWritedownRetrieveOutputModelWritedownInstanceReport) o;
    return Objects.equals(this.writedownInstanceReportRecord, bqWritedownRetrieveOutputModelWritedownInstanceReport.writedownInstanceReportRecord) &&
        Objects.equals(this.writedownInstanceReportType, bqWritedownRetrieveOutputModelWritedownInstanceReport.writedownInstanceReportType) &&
        Objects.equals(this.writedownInstanceReportParameters, bqWritedownRetrieveOutputModelWritedownInstanceReport.writedownInstanceReportParameters) &&
        Objects.equals(this.writedownInstanceReport, bqWritedownRetrieveOutputModelWritedownInstanceReport.writedownInstanceReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(writedownInstanceReportRecord, writedownInstanceReportType, writedownInstanceReportParameters, writedownInstanceReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQWritedownRetrieveOutputModelWritedownInstanceReport {\n");
    
    sb.append("    writedownInstanceReportRecord: ").append(toIndentedString(writedownInstanceReportRecord)).append("\n");
    sb.append("    writedownInstanceReportType: ").append(toIndentedString(writedownInstanceReportType)).append("\n");
    sb.append("    writedownInstanceReportParameters: ").append(toIndentedString(writedownInstanceReportParameters)).append("\n");
    sb.append("    writedownInstanceReport: ").append(toIndentedString(writedownInstanceReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
