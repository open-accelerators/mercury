/*
 * Account Recovery
 * This service domain handles the restructuring of a distressed account (loan) after standard recovery
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.accountrecovery.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQPlanningRetrieveOutputModelPlanningInstanceReport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-07T18:27:41.474305+02:00[Europe/Madrid]")
public class BQPlanningRetrieveOutputModelPlanningInstanceReport {
  @SerializedName("planningInstanceReportRecord")
  private Object planningInstanceReportRecord = null;

  @SerializedName("planningInstanceReportType")
  private String planningInstanceReportType = null;

  @SerializedName("planningInstanceReportParameters")
  private String planningInstanceReportParameters = null;

  @SerializedName("planningInstanceReport")
  private Object planningInstanceReport = null;

  public BQPlanningRetrieveOutputModelPlanningInstanceReport planningInstanceReportRecord(Object planningInstanceReportRecord) {
    this.planningInstanceReportRecord = planningInstanceReportRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected 
   * @return planningInstanceReportRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected ")
  public Object getPlanningInstanceReportRecord() {
    return planningInstanceReportRecord;
  }

  public void setPlanningInstanceReportRecord(Object planningInstanceReportRecord) {
    this.planningInstanceReportRecord = planningInstanceReportRecord;
  }

  public BQPlanningRetrieveOutputModelPlanningInstanceReport planningInstanceReportType(String planningInstanceReportType) {
    this.planningInstanceReportType = planningInstanceReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available 
   * @return planningInstanceReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available ")
  public String getPlanningInstanceReportType() {
    return planningInstanceReportType;
  }

  public void setPlanningInstanceReportType(String planningInstanceReportType) {
    this.planningInstanceReportType = planningInstanceReportType;
  }

  public BQPlanningRetrieveOutputModelPlanningInstanceReport planningInstanceReportParameters(String planningInstanceReportParameters) {
    this.planningInstanceReportParameters = planningInstanceReportParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) 
   * @return planningInstanceReportParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) ")
  public String getPlanningInstanceReportParameters() {
    return planningInstanceReportParameters;
  }

  public void setPlanningInstanceReportParameters(String planningInstanceReportParameters) {
    this.planningInstanceReportParameters = planningInstanceReportParameters;
  }

  public BQPlanningRetrieveOutputModelPlanningInstanceReport planningInstanceReport(Object planningInstanceReport) {
    this.planningInstanceReport = planningInstanceReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate 
   * @return planningInstanceReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate ")
  public Object getPlanningInstanceReport() {
    return planningInstanceReport;
  }

  public void setPlanningInstanceReport(Object planningInstanceReport) {
    this.planningInstanceReport = planningInstanceReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQPlanningRetrieveOutputModelPlanningInstanceReport bqPlanningRetrieveOutputModelPlanningInstanceReport = (BQPlanningRetrieveOutputModelPlanningInstanceReport) o;
    return Objects.equals(this.planningInstanceReportRecord, bqPlanningRetrieveOutputModelPlanningInstanceReport.planningInstanceReportRecord) &&
        Objects.equals(this.planningInstanceReportType, bqPlanningRetrieveOutputModelPlanningInstanceReport.planningInstanceReportType) &&
        Objects.equals(this.planningInstanceReportParameters, bqPlanningRetrieveOutputModelPlanningInstanceReport.planningInstanceReportParameters) &&
        Objects.equals(this.planningInstanceReport, bqPlanningRetrieveOutputModelPlanningInstanceReport.planningInstanceReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planningInstanceReportRecord, planningInstanceReportType, planningInstanceReportParameters, planningInstanceReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQPlanningRetrieveOutputModelPlanningInstanceReport {\n");
    
    sb.append("    planningInstanceReportRecord: ").append(toIndentedString(planningInstanceReportRecord)).append("\n");
    sb.append("    planningInstanceReportType: ").append(toIndentedString(planningInstanceReportType)).append("\n");
    sb.append("    planningInstanceReportParameters: ").append(toIndentedString(planningInstanceReportParameters)).append("\n");
    sb.append("    planningInstanceReport: ").append(toIndentedString(planningInstanceReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
