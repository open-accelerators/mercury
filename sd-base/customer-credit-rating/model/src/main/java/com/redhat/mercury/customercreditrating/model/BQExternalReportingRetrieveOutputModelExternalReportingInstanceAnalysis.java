/*
 * Customer Credit Rating
 * This service domain maintains and administers the bank's credit assessment for customers.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customercreditrating.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-03T15:34:54.132884+02:00[Europe/Madrid]")
public class BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis {
  @SerializedName("externalReportingInstanceAnalysisRecord")
  private Object externalReportingInstanceAnalysisRecord = null;

  @SerializedName("externalReportingInstanceAnalysisReportType")
  private String externalReportingInstanceAnalysisReportType = null;

  @SerializedName("externalReportingInstanceAnalysisParameters")
  private String externalReportingInstanceAnalysisParameters = null;

  @SerializedName("externalReportingInstanceAnalysisReport")
  private Object externalReportingInstanceAnalysisReport = null;

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis externalReportingInstanceAnalysisRecord(Object externalReportingInstanceAnalysisRecord) {
    this.externalReportingInstanceAnalysisRecord = externalReportingInstanceAnalysisRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected 
   * @return externalReportingInstanceAnalysisRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected ")
  public Object getExternalReportingInstanceAnalysisRecord() {
    return externalReportingInstanceAnalysisRecord;
  }

  public void setExternalReportingInstanceAnalysisRecord(Object externalReportingInstanceAnalysisRecord) {
    this.externalReportingInstanceAnalysisRecord = externalReportingInstanceAnalysisRecord;
  }

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis externalReportingInstanceAnalysisReportType(String externalReportingInstanceAnalysisReportType) {
    this.externalReportingInstanceAnalysisReportType = externalReportingInstanceAnalysisReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available 
   * @return externalReportingInstanceAnalysisReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available ")
  public String getExternalReportingInstanceAnalysisReportType() {
    return externalReportingInstanceAnalysisReportType;
  }

  public void setExternalReportingInstanceAnalysisReportType(String externalReportingInstanceAnalysisReportType) {
    this.externalReportingInstanceAnalysisReportType = externalReportingInstanceAnalysisReportType;
  }

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis externalReportingInstanceAnalysisParameters(String externalReportingInstanceAnalysisParameters) {
    this.externalReportingInstanceAnalysisParameters = externalReportingInstanceAnalysisParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) 
   * @return externalReportingInstanceAnalysisParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) ")
  public String getExternalReportingInstanceAnalysisParameters() {
    return externalReportingInstanceAnalysisParameters;
  }

  public void setExternalReportingInstanceAnalysisParameters(String externalReportingInstanceAnalysisParameters) {
    this.externalReportingInstanceAnalysisParameters = externalReportingInstanceAnalysisParameters;
  }

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis externalReportingInstanceAnalysisReport(Object externalReportingInstanceAnalysisReport) {
    this.externalReportingInstanceAnalysisReport = externalReportingInstanceAnalysisReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate 
   * @return externalReportingInstanceAnalysisReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate ")
  public Object getExternalReportingInstanceAnalysisReport() {
    return externalReportingInstanceAnalysisReport;
  }

  public void setExternalReportingInstanceAnalysisReport(Object externalReportingInstanceAnalysisReport) {
    this.externalReportingInstanceAnalysisReport = externalReportingInstanceAnalysisReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis bqExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis = (BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis) o;
    return Objects.equals(this.externalReportingInstanceAnalysisRecord, bqExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis.externalReportingInstanceAnalysisRecord) &&
        Objects.equals(this.externalReportingInstanceAnalysisReportType, bqExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis.externalReportingInstanceAnalysisReportType) &&
        Objects.equals(this.externalReportingInstanceAnalysisParameters, bqExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis.externalReportingInstanceAnalysisParameters) &&
        Objects.equals(this.externalReportingInstanceAnalysisReport, bqExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis.externalReportingInstanceAnalysisReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalReportingInstanceAnalysisRecord, externalReportingInstanceAnalysisReportType, externalReportingInstanceAnalysisParameters, externalReportingInstanceAnalysisReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQExternalReportingRetrieveOutputModelExternalReportingInstanceAnalysis {\n");
    
    sb.append("    externalReportingInstanceAnalysisRecord: ").append(toIndentedString(externalReportingInstanceAnalysisRecord)).append("\n");
    sb.append("    externalReportingInstanceAnalysisReportType: ").append(toIndentedString(externalReportingInstanceAnalysisReportType)).append("\n");
    sb.append("    externalReportingInstanceAnalysisParameters: ").append(toIndentedString(externalReportingInstanceAnalysisParameters)).append("\n");
    sb.append("    externalReportingInstanceAnalysisReport: ").append(toIndentedString(externalReportingInstanceAnalysisReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
