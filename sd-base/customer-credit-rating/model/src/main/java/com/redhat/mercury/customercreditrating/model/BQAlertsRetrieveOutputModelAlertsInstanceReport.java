/*
 * Customer Credit Rating
 * This service domain maintains and administers the bank's credit assessment for customers.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customercreditrating.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQAlertsRetrieveOutputModelAlertsInstanceReport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-03T16:36:13.702891+02:00[Europe/Madrid]")
public class BQAlertsRetrieveOutputModelAlertsInstanceReport {
  @SerializedName("alertsInstanceReportRecord")
  private Object alertsInstanceReportRecord = null;

  @SerializedName("alertsInstanceReportType")
  private String alertsInstanceReportType = null;

  @SerializedName("alertsInstanceReportParameters")
  private String alertsInstanceReportParameters = null;

  @SerializedName("alertsInstanceReport")
  private Object alertsInstanceReport = null;

  public BQAlertsRetrieveOutputModelAlertsInstanceReport alertsInstanceReportRecord(Object alertsInstanceReportRecord) {
    this.alertsInstanceReportRecord = alertsInstanceReportRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected 
   * @return alertsInstanceReportRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected ")
  public Object getAlertsInstanceReportRecord() {
    return alertsInstanceReportRecord;
  }

  public void setAlertsInstanceReportRecord(Object alertsInstanceReportRecord) {
    this.alertsInstanceReportRecord = alertsInstanceReportRecord;
  }

  public BQAlertsRetrieveOutputModelAlertsInstanceReport alertsInstanceReportType(String alertsInstanceReportType) {
    this.alertsInstanceReportType = alertsInstanceReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available 
   * @return alertsInstanceReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available ")
  public String getAlertsInstanceReportType() {
    return alertsInstanceReportType;
  }

  public void setAlertsInstanceReportType(String alertsInstanceReportType) {
    this.alertsInstanceReportType = alertsInstanceReportType;
  }

  public BQAlertsRetrieveOutputModelAlertsInstanceReport alertsInstanceReportParameters(String alertsInstanceReportParameters) {
    this.alertsInstanceReportParameters = alertsInstanceReportParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) 
   * @return alertsInstanceReportParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) ")
  public String getAlertsInstanceReportParameters() {
    return alertsInstanceReportParameters;
  }

  public void setAlertsInstanceReportParameters(String alertsInstanceReportParameters) {
    this.alertsInstanceReportParameters = alertsInstanceReportParameters;
  }

  public BQAlertsRetrieveOutputModelAlertsInstanceReport alertsInstanceReport(Object alertsInstanceReport) {
    this.alertsInstanceReport = alertsInstanceReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate 
   * @return alertsInstanceReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate ")
  public Object getAlertsInstanceReport() {
    return alertsInstanceReport;
  }

  public void setAlertsInstanceReport(Object alertsInstanceReport) {
    this.alertsInstanceReport = alertsInstanceReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQAlertsRetrieveOutputModelAlertsInstanceReport bqAlertsRetrieveOutputModelAlertsInstanceReport = (BQAlertsRetrieveOutputModelAlertsInstanceReport) o;
    return Objects.equals(this.alertsInstanceReportRecord, bqAlertsRetrieveOutputModelAlertsInstanceReport.alertsInstanceReportRecord) &&
        Objects.equals(this.alertsInstanceReportType, bqAlertsRetrieveOutputModelAlertsInstanceReport.alertsInstanceReportType) &&
        Objects.equals(this.alertsInstanceReportParameters, bqAlertsRetrieveOutputModelAlertsInstanceReport.alertsInstanceReportParameters) &&
        Objects.equals(this.alertsInstanceReport, bqAlertsRetrieveOutputModelAlertsInstanceReport.alertsInstanceReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertsInstanceReportRecord, alertsInstanceReportType, alertsInstanceReportParameters, alertsInstanceReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQAlertsRetrieveOutputModelAlertsInstanceReport {\n");
    
    sb.append("    alertsInstanceReportRecord: ").append(toIndentedString(alertsInstanceReportRecord)).append("\n");
    sb.append("    alertsInstanceReportType: ").append(toIndentedString(alertsInstanceReportType)).append("\n");
    sb.append("    alertsInstanceReportParameters: ").append(toIndentedString(alertsInstanceReportParameters)).append("\n");
    sb.append("    alertsInstanceReport: ").append(toIndentedString(alertsInstanceReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
