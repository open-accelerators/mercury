/*
 * Customer Credit Rating
 * This service domain maintains and administers the bank's credit assessment for customers.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customercreditrating.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-03T16:36:13.702891+02:00[Europe/Madrid]")
public class BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis {
  @SerializedName("internalReportingInstanceAnalysisRecord")
  private Object internalReportingInstanceAnalysisRecord = null;

  @SerializedName("internalReportingInstanceAnalysisReportType")
  private String internalReportingInstanceAnalysisReportType = null;

  @SerializedName("internalReportingInstanceAnalysisParameters")
  private String internalReportingInstanceAnalysisParameters = null;

  @SerializedName("internalReportingInstanceAnalysisReport")
  private Object internalReportingInstanceAnalysisReport = null;

  public BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis internalReportingInstanceAnalysisRecord(Object internalReportingInstanceAnalysisRecord) {
    this.internalReportingInstanceAnalysisRecord = internalReportingInstanceAnalysisRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected 
   * @return internalReportingInstanceAnalysisRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected ")
  public Object getInternalReportingInstanceAnalysisRecord() {
    return internalReportingInstanceAnalysisRecord;
  }

  public void setInternalReportingInstanceAnalysisRecord(Object internalReportingInstanceAnalysisRecord) {
    this.internalReportingInstanceAnalysisRecord = internalReportingInstanceAnalysisRecord;
  }

  public BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis internalReportingInstanceAnalysisReportType(String internalReportingInstanceAnalysisReportType) {
    this.internalReportingInstanceAnalysisReportType = internalReportingInstanceAnalysisReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available 
   * @return internalReportingInstanceAnalysisReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available ")
  public String getInternalReportingInstanceAnalysisReportType() {
    return internalReportingInstanceAnalysisReportType;
  }

  public void setInternalReportingInstanceAnalysisReportType(String internalReportingInstanceAnalysisReportType) {
    this.internalReportingInstanceAnalysisReportType = internalReportingInstanceAnalysisReportType;
  }

  public BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis internalReportingInstanceAnalysisParameters(String internalReportingInstanceAnalysisParameters) {
    this.internalReportingInstanceAnalysisParameters = internalReportingInstanceAnalysisParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) 
   * @return internalReportingInstanceAnalysisParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) ")
  public String getInternalReportingInstanceAnalysisParameters() {
    return internalReportingInstanceAnalysisParameters;
  }

  public void setInternalReportingInstanceAnalysisParameters(String internalReportingInstanceAnalysisParameters) {
    this.internalReportingInstanceAnalysisParameters = internalReportingInstanceAnalysisParameters;
  }

  public BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis internalReportingInstanceAnalysisReport(Object internalReportingInstanceAnalysisReport) {
    this.internalReportingInstanceAnalysisReport = internalReportingInstanceAnalysisReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate 
   * @return internalReportingInstanceAnalysisReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate ")
  public Object getInternalReportingInstanceAnalysisReport() {
    return internalReportingInstanceAnalysisReport;
  }

  public void setInternalReportingInstanceAnalysisReport(Object internalReportingInstanceAnalysisReport) {
    this.internalReportingInstanceAnalysisReport = internalReportingInstanceAnalysisReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis bqInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis = (BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis) o;
    return Objects.equals(this.internalReportingInstanceAnalysisRecord, bqInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis.internalReportingInstanceAnalysisRecord) &&
        Objects.equals(this.internalReportingInstanceAnalysisReportType, bqInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis.internalReportingInstanceAnalysisReportType) &&
        Objects.equals(this.internalReportingInstanceAnalysisParameters, bqInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis.internalReportingInstanceAnalysisParameters) &&
        Objects.equals(this.internalReportingInstanceAnalysisReport, bqInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis.internalReportingInstanceAnalysisReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalReportingInstanceAnalysisRecord, internalReportingInstanceAnalysisReportType, internalReportingInstanceAnalysisParameters, internalReportingInstanceAnalysisReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQInternalReportingRetrieveOutputModelInternalReportingInstanceAnalysis {\n");
    
    sb.append("    internalReportingInstanceAnalysisRecord: ").append(toIndentedString(internalReportingInstanceAnalysisRecord)).append("\n");
    sb.append("    internalReportingInstanceAnalysisReportType: ").append(toIndentedString(internalReportingInstanceAnalysisReportType)).append("\n");
    sb.append("    internalReportingInstanceAnalysisParameters: ").append(toIndentedString(internalReportingInstanceAnalysisParameters)).append("\n");
    sb.append("    internalReportingInstanceAnalysisReport: ").append(toIndentedString(internalReportingInstanceAnalysisReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
