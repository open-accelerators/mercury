/*
 * Customer Credit Rating
 * This service domain maintains and administers the bank's credit assessment for customers.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customercreditrating.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-03T16:36:13.702891+02:00[Europe/Madrid]")
public class BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport {
  @SerializedName("externalReportingInstanceReportRecord")
  private Object externalReportingInstanceReportRecord = null;

  @SerializedName("externalReportingInstanceReportType")
  private String externalReportingInstanceReportType = null;

  @SerializedName("externalReportingInstanceReportParameters")
  private String externalReportingInstanceReportParameters = null;

  @SerializedName("externalReportingInstanceReport")
  private Object externalReportingInstanceReport = null;

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport externalReportingInstanceReportRecord(Object externalReportingInstanceReportRecord) {
    this.externalReportingInstanceReportRecord = externalReportingInstanceReportRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected 
   * @return externalReportingInstanceReportRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected ")
  public Object getExternalReportingInstanceReportRecord() {
    return externalReportingInstanceReportRecord;
  }

  public void setExternalReportingInstanceReportRecord(Object externalReportingInstanceReportRecord) {
    this.externalReportingInstanceReportRecord = externalReportingInstanceReportRecord;
  }

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport externalReportingInstanceReportType(String externalReportingInstanceReportType) {
    this.externalReportingInstanceReportType = externalReportingInstanceReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available 
   * @return externalReportingInstanceReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available ")
  public String getExternalReportingInstanceReportType() {
    return externalReportingInstanceReportType;
  }

  public void setExternalReportingInstanceReportType(String externalReportingInstanceReportType) {
    this.externalReportingInstanceReportType = externalReportingInstanceReportType;
  }

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport externalReportingInstanceReportParameters(String externalReportingInstanceReportParameters) {
    this.externalReportingInstanceReportParameters = externalReportingInstanceReportParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) 
   * @return externalReportingInstanceReportParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) ")
  public String getExternalReportingInstanceReportParameters() {
    return externalReportingInstanceReportParameters;
  }

  public void setExternalReportingInstanceReportParameters(String externalReportingInstanceReportParameters) {
    this.externalReportingInstanceReportParameters = externalReportingInstanceReportParameters;
  }

  public BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport externalReportingInstanceReport(Object externalReportingInstanceReport) {
    this.externalReportingInstanceReport = externalReportingInstanceReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate 
   * @return externalReportingInstanceReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate ")
  public Object getExternalReportingInstanceReport() {
    return externalReportingInstanceReport;
  }

  public void setExternalReportingInstanceReport(Object externalReportingInstanceReport) {
    this.externalReportingInstanceReport = externalReportingInstanceReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport bqExternalReportingRetrieveOutputModelExternalReportingInstanceReport = (BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport) o;
    return Objects.equals(this.externalReportingInstanceReportRecord, bqExternalReportingRetrieveOutputModelExternalReportingInstanceReport.externalReportingInstanceReportRecord) &&
        Objects.equals(this.externalReportingInstanceReportType, bqExternalReportingRetrieveOutputModelExternalReportingInstanceReport.externalReportingInstanceReportType) &&
        Objects.equals(this.externalReportingInstanceReportParameters, bqExternalReportingRetrieveOutputModelExternalReportingInstanceReport.externalReportingInstanceReportParameters) &&
        Objects.equals(this.externalReportingInstanceReport, bqExternalReportingRetrieveOutputModelExternalReportingInstanceReport.externalReportingInstanceReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalReportingInstanceReportRecord, externalReportingInstanceReportType, externalReportingInstanceReportParameters, externalReportingInstanceReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQExternalReportingRetrieveOutputModelExternalReportingInstanceReport {\n");
    
    sb.append("    externalReportingInstanceReportRecord: ").append(toIndentedString(externalReportingInstanceReportRecord)).append("\n");
    sb.append("    externalReportingInstanceReportType: ").append(toIndentedString(externalReportingInstanceReportType)).append("\n");
    sb.append("    externalReportingInstanceReportParameters: ").append(toIndentedString(externalReportingInstanceReportParameters)).append("\n");
    sb.append("    externalReportingInstanceReport: ").append(toIndentedString(externalReportingInstanceReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
