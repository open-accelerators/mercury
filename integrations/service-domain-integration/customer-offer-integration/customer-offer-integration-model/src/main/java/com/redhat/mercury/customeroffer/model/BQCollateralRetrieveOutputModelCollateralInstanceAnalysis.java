/*
 * Customer Offer
 * This service domain orchestrates the processing of a product offer for a new/established  customer.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customeroffer.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQCollateralRetrieveOutputModelCollateralInstanceAnalysis
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-19T11:10:08.827631+01:00[Europe/Madrid]")
public class BQCollateralRetrieveOutputModelCollateralInstanceAnalysis {
  @SerializedName("collateralInstanceAnalysisRecord")
  private Object collateralInstanceAnalysisRecord = null;

  @SerializedName("collateralInstanceAnalysisReportType")
  private String collateralInstanceAnalysisReportType = null;

  @SerializedName("collateralInstanceAnalysisParameters")
  private String collateralInstanceAnalysisParameters = null;

  @SerializedName("collateralInstanceAnalysisReport")
  private Object collateralInstanceAnalysisReport = null;

  public BQCollateralRetrieveOutputModelCollateralInstanceAnalysis collateralInstanceAnalysisRecord(Object collateralInstanceAnalysisRecord) {
    this.collateralInstanceAnalysisRecord = collateralInstanceAnalysisRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected 
   * @return collateralInstanceAnalysisRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected ")
  public Object getCollateralInstanceAnalysisRecord() {
    return collateralInstanceAnalysisRecord;
  }

  public void setCollateralInstanceAnalysisRecord(Object collateralInstanceAnalysisRecord) {
    this.collateralInstanceAnalysisRecord = collateralInstanceAnalysisRecord;
  }

  public BQCollateralRetrieveOutputModelCollateralInstanceAnalysis collateralInstanceAnalysisReportType(String collateralInstanceAnalysisReportType) {
    this.collateralInstanceAnalysisReportType = collateralInstanceAnalysisReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available 
   * @return collateralInstanceAnalysisReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available ")
  public String getCollateralInstanceAnalysisReportType() {
    return collateralInstanceAnalysisReportType;
  }

  public void setCollateralInstanceAnalysisReportType(String collateralInstanceAnalysisReportType) {
    this.collateralInstanceAnalysisReportType = collateralInstanceAnalysisReportType;
  }

  public BQCollateralRetrieveOutputModelCollateralInstanceAnalysis collateralInstanceAnalysisParameters(String collateralInstanceAnalysisParameters) {
    this.collateralInstanceAnalysisParameters = collateralInstanceAnalysisParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) 
   * @return collateralInstanceAnalysisParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) ")
  public String getCollateralInstanceAnalysisParameters() {
    return collateralInstanceAnalysisParameters;
  }

  public void setCollateralInstanceAnalysisParameters(String collateralInstanceAnalysisParameters) {
    this.collateralInstanceAnalysisParameters = collateralInstanceAnalysisParameters;
  }

  public BQCollateralRetrieveOutputModelCollateralInstanceAnalysis collateralInstanceAnalysisReport(Object collateralInstanceAnalysisReport) {
    this.collateralInstanceAnalysisReport = collateralInstanceAnalysisReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate 
   * @return collateralInstanceAnalysisReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate ")
  public Object getCollateralInstanceAnalysisReport() {
    return collateralInstanceAnalysisReport;
  }

  public void setCollateralInstanceAnalysisReport(Object collateralInstanceAnalysisReport) {
    this.collateralInstanceAnalysisReport = collateralInstanceAnalysisReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQCollateralRetrieveOutputModelCollateralInstanceAnalysis bqCollateralRetrieveOutputModelCollateralInstanceAnalysis = (BQCollateralRetrieveOutputModelCollateralInstanceAnalysis) o;
    return Objects.equals(this.collateralInstanceAnalysisRecord, bqCollateralRetrieveOutputModelCollateralInstanceAnalysis.collateralInstanceAnalysisRecord) &&
        Objects.equals(this.collateralInstanceAnalysisReportType, bqCollateralRetrieveOutputModelCollateralInstanceAnalysis.collateralInstanceAnalysisReportType) &&
        Objects.equals(this.collateralInstanceAnalysisParameters, bqCollateralRetrieveOutputModelCollateralInstanceAnalysis.collateralInstanceAnalysisParameters) &&
        Objects.equals(this.collateralInstanceAnalysisReport, bqCollateralRetrieveOutputModelCollateralInstanceAnalysis.collateralInstanceAnalysisReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collateralInstanceAnalysisRecord, collateralInstanceAnalysisReportType, collateralInstanceAnalysisParameters, collateralInstanceAnalysisReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQCollateralRetrieveOutputModelCollateralInstanceAnalysis {\n");
    
    sb.append("    collateralInstanceAnalysisRecord: ").append(toIndentedString(collateralInstanceAnalysisRecord)).append("\n");
    sb.append("    collateralInstanceAnalysisReportType: ").append(toIndentedString(collateralInstanceAnalysisReportType)).append("\n");
    sb.append("    collateralInstanceAnalysisParameters: ").append(toIndentedString(collateralInstanceAnalysisParameters)).append("\n");
    sb.append("    collateralInstanceAnalysisReport: ").append(toIndentedString(collateralInstanceAnalysisReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
