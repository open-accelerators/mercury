/*
 * Customer Offer
 * This service domain orchestrates the processing of a product offer for a new/established  customer.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customeroffer.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-19T11:10:08.827631+01:00[Europe/Madrid]")
public class BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 {
  @SerializedName("correspondenceandDocumentsInstanceReportRecord")
  private Object correspondenceandDocumentsInstanceReportRecord = null;

  @SerializedName("correspondenceandDocumentsInstanceReportType")
  private String correspondenceandDocumentsInstanceReportType = null;

  @SerializedName("correspondenceandDocumentsInstanceReportParameters")
  private String correspondenceandDocumentsInstanceReportParameters = null;

  @SerializedName("correspondenceandDocumentsInstanceReport")
  private Object correspondenceandDocumentsInstanceReport = null;

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 correspondenceandDocumentsInstanceReportRecord(Object correspondenceandDocumentsInstanceReportRecord) {
    this.correspondenceandDocumentsInstanceReportRecord = correspondenceandDocumentsInstanceReportRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected 
   * @return correspondenceandDocumentsInstanceReportRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected ")
  public Object getCorrespondenceandDocumentsInstanceReportRecord() {
    return correspondenceandDocumentsInstanceReportRecord;
  }

  public void setCorrespondenceandDocumentsInstanceReportRecord(Object correspondenceandDocumentsInstanceReportRecord) {
    this.correspondenceandDocumentsInstanceReportRecord = correspondenceandDocumentsInstanceReportRecord;
  }

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 correspondenceandDocumentsInstanceReportType(String correspondenceandDocumentsInstanceReportType) {
    this.correspondenceandDocumentsInstanceReportType = correspondenceandDocumentsInstanceReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available 
   * @return correspondenceandDocumentsInstanceReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available ")
  public String getCorrespondenceandDocumentsInstanceReportType() {
    return correspondenceandDocumentsInstanceReportType;
  }

  public void setCorrespondenceandDocumentsInstanceReportType(String correspondenceandDocumentsInstanceReportType) {
    this.correspondenceandDocumentsInstanceReportType = correspondenceandDocumentsInstanceReportType;
  }

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 correspondenceandDocumentsInstanceReportParameters(String correspondenceandDocumentsInstanceReportParameters) {
    this.correspondenceandDocumentsInstanceReportParameters = correspondenceandDocumentsInstanceReportParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) 
   * @return correspondenceandDocumentsInstanceReportParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) ")
  public String getCorrespondenceandDocumentsInstanceReportParameters() {
    return correspondenceandDocumentsInstanceReportParameters;
  }

  public void setCorrespondenceandDocumentsInstanceReportParameters(String correspondenceandDocumentsInstanceReportParameters) {
    this.correspondenceandDocumentsInstanceReportParameters = correspondenceandDocumentsInstanceReportParameters;
  }

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 correspondenceandDocumentsInstanceReport(Object correspondenceandDocumentsInstanceReport) {
    this.correspondenceandDocumentsInstanceReport = correspondenceandDocumentsInstanceReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate 
   * @return correspondenceandDocumentsInstanceReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate ")
  public Object getCorrespondenceandDocumentsInstanceReport() {
    return correspondenceandDocumentsInstanceReport;
  }

  public void setCorrespondenceandDocumentsInstanceReport(Object correspondenceandDocumentsInstanceReport) {
    this.correspondenceandDocumentsInstanceReport = correspondenceandDocumentsInstanceReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 = (BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1) o;
    return Objects.equals(this.correspondenceandDocumentsInstanceReportRecord, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1.correspondenceandDocumentsInstanceReportRecord) &&
        Objects.equals(this.correspondenceandDocumentsInstanceReportType, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1.correspondenceandDocumentsInstanceReportType) &&
        Objects.equals(this.correspondenceandDocumentsInstanceReportParameters, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1.correspondenceandDocumentsInstanceReportParameters) &&
        Objects.equals(this.correspondenceandDocumentsInstanceReport, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1.correspondenceandDocumentsInstanceReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correspondenceandDocumentsInstanceReportRecord, correspondenceandDocumentsInstanceReportType, correspondenceandDocumentsInstanceReportParameters, correspondenceandDocumentsInstanceReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceReport1 {\n");
    
    sb.append("    correspondenceandDocumentsInstanceReportRecord: ").append(toIndentedString(correspondenceandDocumentsInstanceReportRecord)).append("\n");
    sb.append("    correspondenceandDocumentsInstanceReportType: ").append(toIndentedString(correspondenceandDocumentsInstanceReportType)).append("\n");
    sb.append("    correspondenceandDocumentsInstanceReportParameters: ").append(toIndentedString(correspondenceandDocumentsInstanceReportParameters)).append("\n");
    sb.append("    correspondenceandDocumentsInstanceReport: ").append(toIndentedString(correspondenceandDocumentsInstanceReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
