/*
 * Customer Offer
 * This service domain orchestrates the processing of a product offer for a new/established  customer.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customeroffer.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-19T11:10:08.827631+01:00[Europe/Madrid]")
public class BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis {
  @SerializedName("underwritingInstanceAnalysisRecord")
  private Object underwritingInstanceAnalysisRecord = null;

  @SerializedName("underwritingInstanceAnalysisReportType")
  private String underwritingInstanceAnalysisReportType = null;

  @SerializedName("underwritingInstanceAnalysisParameters")
  private String underwritingInstanceAnalysisParameters = null;

  @SerializedName("underwritingInstanceAnalysisReport")
  private Object underwritingInstanceAnalysisReport = null;

  public BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis underwritingInstanceAnalysisRecord(Object underwritingInstanceAnalysisRecord) {
    this.underwritingInstanceAnalysisRecord = underwritingInstanceAnalysisRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected 
   * @return underwritingInstanceAnalysisRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected ")
  public Object getUnderwritingInstanceAnalysisRecord() {
    return underwritingInstanceAnalysisRecord;
  }

  public void setUnderwritingInstanceAnalysisRecord(Object underwritingInstanceAnalysisRecord) {
    this.underwritingInstanceAnalysisRecord = underwritingInstanceAnalysisRecord;
  }

  public BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis underwritingInstanceAnalysisReportType(String underwritingInstanceAnalysisReportType) {
    this.underwritingInstanceAnalysisReportType = underwritingInstanceAnalysisReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available 
   * @return underwritingInstanceAnalysisReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available ")
  public String getUnderwritingInstanceAnalysisReportType() {
    return underwritingInstanceAnalysisReportType;
  }

  public void setUnderwritingInstanceAnalysisReportType(String underwritingInstanceAnalysisReportType) {
    this.underwritingInstanceAnalysisReportType = underwritingInstanceAnalysisReportType;
  }

  public BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis underwritingInstanceAnalysisParameters(String underwritingInstanceAnalysisParameters) {
    this.underwritingInstanceAnalysisParameters = underwritingInstanceAnalysisParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) 
   * @return underwritingInstanceAnalysisParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) ")
  public String getUnderwritingInstanceAnalysisParameters() {
    return underwritingInstanceAnalysisParameters;
  }

  public void setUnderwritingInstanceAnalysisParameters(String underwritingInstanceAnalysisParameters) {
    this.underwritingInstanceAnalysisParameters = underwritingInstanceAnalysisParameters;
  }

  public BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis underwritingInstanceAnalysisReport(Object underwritingInstanceAnalysisReport) {
    this.underwritingInstanceAnalysisReport = underwritingInstanceAnalysisReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate 
   * @return underwritingInstanceAnalysisReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate ")
  public Object getUnderwritingInstanceAnalysisReport() {
    return underwritingInstanceAnalysisReport;
  }

  public void setUnderwritingInstanceAnalysisReport(Object underwritingInstanceAnalysisReport) {
    this.underwritingInstanceAnalysisReport = underwritingInstanceAnalysisReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis bqUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis = (BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis) o;
    return Objects.equals(this.underwritingInstanceAnalysisRecord, bqUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis.underwritingInstanceAnalysisRecord) &&
        Objects.equals(this.underwritingInstanceAnalysisReportType, bqUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis.underwritingInstanceAnalysisReportType) &&
        Objects.equals(this.underwritingInstanceAnalysisParameters, bqUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis.underwritingInstanceAnalysisParameters) &&
        Objects.equals(this.underwritingInstanceAnalysisReport, bqUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis.underwritingInstanceAnalysisReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(underwritingInstanceAnalysisRecord, underwritingInstanceAnalysisReportType, underwritingInstanceAnalysisParameters, underwritingInstanceAnalysisReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQUnderwritingRetrieveOutputModelUnderwritingInstanceAnalysis {\n");
    
    sb.append("    underwritingInstanceAnalysisRecord: ").append(toIndentedString(underwritingInstanceAnalysisRecord)).append("\n");
    sb.append("    underwritingInstanceAnalysisReportType: ").append(toIndentedString(underwritingInstanceAnalysisReportType)).append("\n");
    sb.append("    underwritingInstanceAnalysisParameters: ").append(toIndentedString(underwritingInstanceAnalysisParameters)).append("\n");
    sb.append("    underwritingInstanceAnalysisReport: ").append(toIndentedString(underwritingInstanceAnalysisReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
