/*
 * Customer Offer
 * This service domain orchestrates the processing of a product offer for a new/established  customer.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customeroffer.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQBookingRetrieveOutputModelBookingInstanceAnalysis1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-19T11:10:08.827631+01:00[Europe/Madrid]")
public class BQBookingRetrieveOutputModelBookingInstanceAnalysis1 {
  @SerializedName("bookingInstanceAnalysisRecord")
  private Object bookingInstanceAnalysisRecord = null;

  @SerializedName("bookingInstanceAnalysisReportType")
  private String bookingInstanceAnalysisReportType = null;

  @SerializedName("bookingInstanceAnalysisParameters")
  private String bookingInstanceAnalysisParameters = null;

  @SerializedName("bookingInstanceAnalysisReport")
  private Object bookingInstanceAnalysisReport = null;

  public BQBookingRetrieveOutputModelBookingInstanceAnalysis1 bookingInstanceAnalysisRecord(Object bookingInstanceAnalysisRecord) {
    this.bookingInstanceAnalysisRecord = bookingInstanceAnalysisRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected 
   * @return bookingInstanceAnalysisRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected ")
  public Object getBookingInstanceAnalysisRecord() {
    return bookingInstanceAnalysisRecord;
  }

  public void setBookingInstanceAnalysisRecord(Object bookingInstanceAnalysisRecord) {
    this.bookingInstanceAnalysisRecord = bookingInstanceAnalysisRecord;
  }

  public BQBookingRetrieveOutputModelBookingInstanceAnalysis1 bookingInstanceAnalysisReportType(String bookingInstanceAnalysisReportType) {
    this.bookingInstanceAnalysisReportType = bookingInstanceAnalysisReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available 
   * @return bookingInstanceAnalysisReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available ")
  public String getBookingInstanceAnalysisReportType() {
    return bookingInstanceAnalysisReportType;
  }

  public void setBookingInstanceAnalysisReportType(String bookingInstanceAnalysisReportType) {
    this.bookingInstanceAnalysisReportType = bookingInstanceAnalysisReportType;
  }

  public BQBookingRetrieveOutputModelBookingInstanceAnalysis1 bookingInstanceAnalysisParameters(String bookingInstanceAnalysisParameters) {
    this.bookingInstanceAnalysisParameters = bookingInstanceAnalysisParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) 
   * @return bookingInstanceAnalysisParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) ")
  public String getBookingInstanceAnalysisParameters() {
    return bookingInstanceAnalysisParameters;
  }

  public void setBookingInstanceAnalysisParameters(String bookingInstanceAnalysisParameters) {
    this.bookingInstanceAnalysisParameters = bookingInstanceAnalysisParameters;
  }

  public BQBookingRetrieveOutputModelBookingInstanceAnalysis1 bookingInstanceAnalysisReport(Object bookingInstanceAnalysisReport) {
    this.bookingInstanceAnalysisReport = bookingInstanceAnalysisReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate 
   * @return bookingInstanceAnalysisReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate ")
  public Object getBookingInstanceAnalysisReport() {
    return bookingInstanceAnalysisReport;
  }

  public void setBookingInstanceAnalysisReport(Object bookingInstanceAnalysisReport) {
    this.bookingInstanceAnalysisReport = bookingInstanceAnalysisReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQBookingRetrieveOutputModelBookingInstanceAnalysis1 bqBookingRetrieveOutputModelBookingInstanceAnalysis1 = (BQBookingRetrieveOutputModelBookingInstanceAnalysis1) o;
    return Objects.equals(this.bookingInstanceAnalysisRecord, bqBookingRetrieveOutputModelBookingInstanceAnalysis1.bookingInstanceAnalysisRecord) &&
        Objects.equals(this.bookingInstanceAnalysisReportType, bqBookingRetrieveOutputModelBookingInstanceAnalysis1.bookingInstanceAnalysisReportType) &&
        Objects.equals(this.bookingInstanceAnalysisParameters, bqBookingRetrieveOutputModelBookingInstanceAnalysis1.bookingInstanceAnalysisParameters) &&
        Objects.equals(this.bookingInstanceAnalysisReport, bqBookingRetrieveOutputModelBookingInstanceAnalysis1.bookingInstanceAnalysisReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookingInstanceAnalysisRecord, bookingInstanceAnalysisReportType, bookingInstanceAnalysisParameters, bookingInstanceAnalysisReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQBookingRetrieveOutputModelBookingInstanceAnalysis1 {\n");
    
    sb.append("    bookingInstanceAnalysisRecord: ").append(toIndentedString(bookingInstanceAnalysisRecord)).append("\n");
    sb.append("    bookingInstanceAnalysisReportType: ").append(toIndentedString(bookingInstanceAnalysisReportType)).append("\n");
    sb.append("    bookingInstanceAnalysisParameters: ").append(toIndentedString(bookingInstanceAnalysisParameters)).append("\n");
    sb.append("    bookingInstanceAnalysisReport: ").append(toIndentedString(bookingInstanceAnalysisReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
