/*
 * Customer Offer
 * This service domain orchestrates the processing of a product offer for a new/established  customer.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customeroffer.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-19T11:10:08.827631+01:00[Europe/Madrid]")
public class BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis {
  @SerializedName("correspondenceandDocumentsInstanceAnalysisRecord")
  private Object correspondenceandDocumentsInstanceAnalysisRecord = null;

  @SerializedName("correspondenceandDocumentsInstanceAnalysisReportType")
  private String correspondenceandDocumentsInstanceAnalysisReportType = null;

  @SerializedName("correspondenceandDocumentsInstanceAnalysisParameters")
  private String correspondenceandDocumentsInstanceAnalysisParameters = null;

  @SerializedName("correspondenceandDocumentsInstanceAnalysisReport")
  private Object correspondenceandDocumentsInstanceAnalysisReport = null;

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis correspondenceandDocumentsInstanceAnalysisRecord(Object correspondenceandDocumentsInstanceAnalysisRecord) {
    this.correspondenceandDocumentsInstanceAnalysisRecord = correspondenceandDocumentsInstanceAnalysisRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected 
   * @return correspondenceandDocumentsInstanceAnalysisRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The inputs and results of the instance analysis that can be on-going, periodic and actual and projected ")
  public Object getCorrespondenceandDocumentsInstanceAnalysisRecord() {
    return correspondenceandDocumentsInstanceAnalysisRecord;
  }

  public void setCorrespondenceandDocumentsInstanceAnalysisRecord(Object correspondenceandDocumentsInstanceAnalysisRecord) {
    this.correspondenceandDocumentsInstanceAnalysisRecord = correspondenceandDocumentsInstanceAnalysisRecord;
  }

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis correspondenceandDocumentsInstanceAnalysisReportType(String correspondenceandDocumentsInstanceAnalysisReportType) {
    this.correspondenceandDocumentsInstanceAnalysisReportType = correspondenceandDocumentsInstanceAnalysisReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available 
   * @return correspondenceandDocumentsInstanceAnalysisReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external performance analysis report available ")
  public String getCorrespondenceandDocumentsInstanceAnalysisReportType() {
    return correspondenceandDocumentsInstanceAnalysisReportType;
  }

  public void setCorrespondenceandDocumentsInstanceAnalysisReportType(String correspondenceandDocumentsInstanceAnalysisReportType) {
    this.correspondenceandDocumentsInstanceAnalysisReportType = correspondenceandDocumentsInstanceAnalysisReportType;
  }

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis correspondenceandDocumentsInstanceAnalysisParameters(String correspondenceandDocumentsInstanceAnalysisParameters) {
    this.correspondenceandDocumentsInstanceAnalysisParameters = correspondenceandDocumentsInstanceAnalysisParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) 
   * @return correspondenceandDocumentsInstanceAnalysisParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the analysis (e.g. period, algorithm type) ")
  public String getCorrespondenceandDocumentsInstanceAnalysisParameters() {
    return correspondenceandDocumentsInstanceAnalysisParameters;
  }

  public void setCorrespondenceandDocumentsInstanceAnalysisParameters(String correspondenceandDocumentsInstanceAnalysisParameters) {
    this.correspondenceandDocumentsInstanceAnalysisParameters = correspondenceandDocumentsInstanceAnalysisParameters;
  }

  public BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis correspondenceandDocumentsInstanceAnalysisReport(Object correspondenceandDocumentsInstanceAnalysisReport) {
    this.correspondenceandDocumentsInstanceAnalysisReport = correspondenceandDocumentsInstanceAnalysisReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate 
   * @return correspondenceandDocumentsInstanceAnalysisReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external analysis report in any suitable form including selection filters where appropriate ")
  public Object getCorrespondenceandDocumentsInstanceAnalysisReport() {
    return correspondenceandDocumentsInstanceAnalysisReport;
  }

  public void setCorrespondenceandDocumentsInstanceAnalysisReport(Object correspondenceandDocumentsInstanceAnalysisReport) {
    this.correspondenceandDocumentsInstanceAnalysisReport = correspondenceandDocumentsInstanceAnalysisReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis = (BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis) o;
    return Objects.equals(this.correspondenceandDocumentsInstanceAnalysisRecord, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis.correspondenceandDocumentsInstanceAnalysisRecord) &&
        Objects.equals(this.correspondenceandDocumentsInstanceAnalysisReportType, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis.correspondenceandDocumentsInstanceAnalysisReportType) &&
        Objects.equals(this.correspondenceandDocumentsInstanceAnalysisParameters, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis.correspondenceandDocumentsInstanceAnalysisParameters) &&
        Objects.equals(this.correspondenceandDocumentsInstanceAnalysisReport, bqCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis.correspondenceandDocumentsInstanceAnalysisReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correspondenceandDocumentsInstanceAnalysisRecord, correspondenceandDocumentsInstanceAnalysisReportType, correspondenceandDocumentsInstanceAnalysisParameters, correspondenceandDocumentsInstanceAnalysisReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQCorrespondenceandDocumentsRetrieveOutputModelCorrespondenceandDocumentsInstanceAnalysis {\n");
    
    sb.append("    correspondenceandDocumentsInstanceAnalysisRecord: ").append(toIndentedString(correspondenceandDocumentsInstanceAnalysisRecord)).append("\n");
    sb.append("    correspondenceandDocumentsInstanceAnalysisReportType: ").append(toIndentedString(correspondenceandDocumentsInstanceAnalysisReportType)).append("\n");
    sb.append("    correspondenceandDocumentsInstanceAnalysisParameters: ").append(toIndentedString(correspondenceandDocumentsInstanceAnalysisParameters)).append("\n");
    sb.append("    correspondenceandDocumentsInstanceAnalysisReport: ").append(toIndentedString(correspondenceandDocumentsInstanceAnalysisReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
