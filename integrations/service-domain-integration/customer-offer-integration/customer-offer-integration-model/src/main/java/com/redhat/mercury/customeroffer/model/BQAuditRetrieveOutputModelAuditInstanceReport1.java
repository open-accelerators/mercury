/*
 * Customer Offer
 * This service domain orchestrates the processing of a product offer for a new/established  customer.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customeroffer.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQAuditRetrieveOutputModelAuditInstanceReport1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-19T11:10:08.827631+01:00[Europe/Madrid]")
public class BQAuditRetrieveOutputModelAuditInstanceReport1 {
  @SerializedName("auditInstanceReportRecord")
  private Object auditInstanceReportRecord = null;

  @SerializedName("auditInstanceReportType")
  private String auditInstanceReportType = null;

  @SerializedName("auditInstanceReportParameters")
  private String auditInstanceReportParameters = null;

  @SerializedName("auditInstanceReport")
  private Object auditInstanceReport = null;

  public BQAuditRetrieveOutputModelAuditInstanceReport1 auditInstanceReportRecord(Object auditInstanceReportRecord) {
    this.auditInstanceReportRecord = auditInstanceReportRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected 
   * @return auditInstanceReportRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected ")
  public Object getAuditInstanceReportRecord() {
    return auditInstanceReportRecord;
  }

  public void setAuditInstanceReportRecord(Object auditInstanceReportRecord) {
    this.auditInstanceReportRecord = auditInstanceReportRecord;
  }

  public BQAuditRetrieveOutputModelAuditInstanceReport1 auditInstanceReportType(String auditInstanceReportType) {
    this.auditInstanceReportType = auditInstanceReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available 
   * @return auditInstanceReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available ")
  public String getAuditInstanceReportType() {
    return auditInstanceReportType;
  }

  public void setAuditInstanceReportType(String auditInstanceReportType) {
    this.auditInstanceReportType = auditInstanceReportType;
  }

  public BQAuditRetrieveOutputModelAuditInstanceReport1 auditInstanceReportParameters(String auditInstanceReportParameters) {
    this.auditInstanceReportParameters = auditInstanceReportParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) 
   * @return auditInstanceReportParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) ")
  public String getAuditInstanceReportParameters() {
    return auditInstanceReportParameters;
  }

  public void setAuditInstanceReportParameters(String auditInstanceReportParameters) {
    this.auditInstanceReportParameters = auditInstanceReportParameters;
  }

  public BQAuditRetrieveOutputModelAuditInstanceReport1 auditInstanceReport(Object auditInstanceReport) {
    this.auditInstanceReport = auditInstanceReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate 
   * @return auditInstanceReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate ")
  public Object getAuditInstanceReport() {
    return auditInstanceReport;
  }

  public void setAuditInstanceReport(Object auditInstanceReport) {
    this.auditInstanceReport = auditInstanceReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQAuditRetrieveOutputModelAuditInstanceReport1 bqAuditRetrieveOutputModelAuditInstanceReport1 = (BQAuditRetrieveOutputModelAuditInstanceReport1) o;
    return Objects.equals(this.auditInstanceReportRecord, bqAuditRetrieveOutputModelAuditInstanceReport1.auditInstanceReportRecord) &&
        Objects.equals(this.auditInstanceReportType, bqAuditRetrieveOutputModelAuditInstanceReport1.auditInstanceReportType) &&
        Objects.equals(this.auditInstanceReportParameters, bqAuditRetrieveOutputModelAuditInstanceReport1.auditInstanceReportParameters) &&
        Objects.equals(this.auditInstanceReport, bqAuditRetrieveOutputModelAuditInstanceReport1.auditInstanceReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditInstanceReportRecord, auditInstanceReportType, auditInstanceReportParameters, auditInstanceReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQAuditRetrieveOutputModelAuditInstanceReport1 {\n");
    
    sb.append("    auditInstanceReportRecord: ").append(toIndentedString(auditInstanceReportRecord)).append("\n");
    sb.append("    auditInstanceReportType: ").append(toIndentedString(auditInstanceReportType)).append("\n");
    sb.append("    auditInstanceReportParameters: ").append(toIndentedString(auditInstanceReportParameters)).append("\n");
    sb.append("    auditInstanceReport: ").append(toIndentedString(auditInstanceReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
