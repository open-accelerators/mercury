/*
 * Customer Offer
 * This service domain orchestrates the processing of a product offer for a new/established  customer.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.mercury.customeroffer.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-19T11:10:08.827631+01:00[Europe/Madrid]")
public class BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 {
  @SerializedName("disclosuresInstanceReportRecord")
  private Object disclosuresInstanceReportRecord = null;

  @SerializedName("disclosuresInstanceReportType")
  private String disclosuresInstanceReportType = null;

  @SerializedName("disclosuresInstanceReportParameters")
  private String disclosuresInstanceReportParameters = null;

  @SerializedName("disclosuresInstanceReport")
  private Object disclosuresInstanceReport = null;

  public BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 disclosuresInstanceReportRecord(Object disclosuresInstanceReportRecord) {
    this.disclosuresInstanceReportRecord = disclosuresInstanceReportRecord;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected 
   * @return disclosuresInstanceReportRecord
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The input information used to assemble the report that can be on-going, periodic and actual and projected ")
  public Object getDisclosuresInstanceReportRecord() {
    return disclosuresInstanceReportRecord;
  }

  public void setDisclosuresInstanceReportRecord(Object disclosuresInstanceReportRecord) {
    this.disclosuresInstanceReportRecord = disclosuresInstanceReportRecord;
  }

  public BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 disclosuresInstanceReportType(String disclosuresInstanceReportType) {
    this.disclosuresInstanceReportType = disclosuresInstanceReportType;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available 
   * @return disclosuresInstanceReportType
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code  general-info: The type of external report available ")
  public String getDisclosuresInstanceReportType() {
    return disclosuresInstanceReportType;
  }

  public void setDisclosuresInstanceReportType(String disclosuresInstanceReportType) {
    this.disclosuresInstanceReportType = disclosuresInstanceReportType;
  }

  public BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 disclosuresInstanceReportParameters(String disclosuresInstanceReportParameters) {
    this.disclosuresInstanceReportParameters = disclosuresInstanceReportParameters;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) 
   * @return disclosuresInstanceReportParameters
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text  general-info: The selection parameters for the report (e.g. period, content type) ")
  public String getDisclosuresInstanceReportParameters() {
    return disclosuresInstanceReportParameters;
  }

  public void setDisclosuresInstanceReportParameters(String disclosuresInstanceReportParameters) {
    this.disclosuresInstanceReportParameters = disclosuresInstanceReportParameters;
  }

  public BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 disclosuresInstanceReport(Object disclosuresInstanceReport) {
    this.disclosuresInstanceReport = disclosuresInstanceReport;
    return this;
  }

   /**
   * &#x60;status: Not Mapped&#x60;  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate 
   * @return disclosuresInstanceReport
  **/
  @Schema(description = "`status: Not Mapped`  core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary  general-info: The external report in any suitable form including selection filters where appropriate ")
  public Object getDisclosuresInstanceReport() {
    return disclosuresInstanceReport;
  }

  public void setDisclosuresInstanceReport(Object disclosuresInstanceReport) {
    this.disclosuresInstanceReport = disclosuresInstanceReport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 bqDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 = (BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1) o;
    return Objects.equals(this.disclosuresInstanceReportRecord, bqDisclosuresRetrieveOutputModelDisclosuresInstanceReport1.disclosuresInstanceReportRecord) &&
        Objects.equals(this.disclosuresInstanceReportType, bqDisclosuresRetrieveOutputModelDisclosuresInstanceReport1.disclosuresInstanceReportType) &&
        Objects.equals(this.disclosuresInstanceReportParameters, bqDisclosuresRetrieveOutputModelDisclosuresInstanceReport1.disclosuresInstanceReportParameters) &&
        Objects.equals(this.disclosuresInstanceReport, bqDisclosuresRetrieveOutputModelDisclosuresInstanceReport1.disclosuresInstanceReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disclosuresInstanceReportRecord, disclosuresInstanceReportType, disclosuresInstanceReportParameters, disclosuresInstanceReport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BQDisclosuresRetrieveOutputModelDisclosuresInstanceReport1 {\n");
    
    sb.append("    disclosuresInstanceReportRecord: ").append(toIndentedString(disclosuresInstanceReportRecord)).append("\n");
    sb.append("    disclosuresInstanceReportType: ").append(toIndentedString(disclosuresInstanceReportType)).append("\n");
    sb.append("    disclosuresInstanceReportParameters: ").append(toIndentedString(disclosuresInstanceReportParameters)).append("\n");
    sb.append("    disclosuresInstanceReport: ").append(toIndentedString(disclosuresInstanceReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
