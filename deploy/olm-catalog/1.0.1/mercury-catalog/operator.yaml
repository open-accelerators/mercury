---
defaultChannel: preview
description: |2

  [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

  <img align="right" width="40%" src="https://avatars3.githubusercontent.com/u/64280816?s=200&v=4">

  # An open platform for a modular, digital bank

  Project Mercury aims at developing a solution approach for the modernization of core banking systems, exploring new technologies and ways of operating in an open hybrid cloud. Creating and enabling the foundation of an open platform for modular, digital banking. Using open-source software and open standards currently available, combined with industry best practices.

  The provided reference implementation can serve as an example. While some resulting artifacts leverage the expertise of developing this solution approach can become reusable templates, repeatable processes, and building blocks of cloud-native components and applications.

  We invite the collaboration of technology experts and experienced business practitioners across the financial services industry to join and participate in co-creation.

  ## Components

  ### [Integrations](integrations/README.md)

  The Integrations component generates routes between the different components of each Service Domain in order to promote the free flow of data across the system.

  ### [Mercury Framework](mercury-framework/README.md)

  The Mercury Framework contains the core structure of all Service Domains and their implementations of behavior as well as a collection of libraries and tools to facilitate the integration between them.

  This component is the starting point for developers wishing to implement any given Service Domain.

  ### [Mercury Operator](mercury-operator/README.md)

  The Mercury Operator manages the deployment of the Service Domain Clusters by creating infrastructure components essential for service domains to function and communicate.

  This component is the starting point for cluster administrators wishing to deploy an ecosystem of Service Domains on their application cluster.

  ## Get involved with the community
  __(Under construction)__

  We welcome contributions! Here's how you can contribute:

  * _Browse issues_ or _file an issue_
  * Chat with us on [ZulipChat](https://mercury.zulipchat.com/)
  * Contribute:
     * Read the _contributing guide_ before starting work on an issue
     * Try to fix _good first issues_
     * Help out on _issues that need help_
     * Join in on _discussion issues_

  _Make sure to follow the **Code of Conduct** when contributing so we can foster an open and welcoming community._

  ## License

  Copyright 2020-2021 Red Hat, Inc.

  Distributed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).

  SPDX-License-Identifier: [Apache-2.0](https://spdx.org/licenses/Apache-2.0)
icon:
  base64data: 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
  mediatype: image/png
name: mercury-operator
schema: olm.package
---
image: quay.io/ecosystem-appeng/mercury-bundle:1.0.1-SNAPSHOT
name: mercury-operator.1.0.1
package: mercury-operator
properties:
- type: olm.gvk
  value:
    group: mercury.redhat.io
    kind: ServiceDomain
    version: v1alpha1
- type: olm.gvk
  value:
    group: mercury.redhat.io
    kind: ServiceDomainCluster
    version: v1alpha1
- type: olm.gvk.required
  value:
    group: camel.apache.org
    kind: Integration
    version: v1
- type: olm.gvk.required
  value:
    group: kafka.strimzi.io
    kind: Kafka
    version: v1beta2
- type: olm.gvk.required
  value:
    group: kafka.strimzi.io
    kind: KafkaTopic
    version: v1beta2
- type: olm.gvk.required
  value:
    group: kafka.strimzi.io
    kind: KafkaUser
    version: v1beta2
- type: olm.package
  value:
    packageName: mercury-operator
    version: 1.0.1
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImRpcmVjdHMueWFtbCI6IiMgY2FtZWwtazogbGFuZ3VhZ2U9eWFtbFxuIyBjYW1lbC1rOiBkZXBlbmRlbmN5PWNhbWVsLXF1YXJrdXMtcHJvdG9idWZcbiMgY2FtZWwtazogZGVwZW5kZW5jeT1tdm46Y29tLnJlZGhhdC5tZXJjdXJ5OmN1c3RvbWVyLWNyZWRpdC1yYXRpbmctY29tbW9uOjEuMC4xLVNOQVBTSE9UXG5cbi0gZnJvbTpcbiAgICB1cmk6IGRpcmVjdDpJbml0aWF0ZVxuICAgIHN0ZXBzOlxuICAgICAgLSB1bm1hcnNoYWw6XG4gICAgICAgICAgcHJvdG9idWY6XG4gICAgICAgICAgICBpbnN0YW5jZS1jbGFzczogY29tLnJlZGhhdC5tZXJjdXJ5LmN1c3RvbWVyY3JlZGl0cmF0aW5nLnYxMC5hcGkuY3JjdXN0b21lcmNyZWRpdHJhdGluZ3N0YXRlc2VydmljZS5DckN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVTZXJ2aWNlJEluaXRpYXRlUmVxdWVzdFxuICAgICAgICAgICAgY29udGVudC10eXBlLWZvcm1hdDoganNvblxuICAgICAgLSB0bzpcbiAgICAgICAgICB1cmk6IGdycGM6Ly97e21lcmN1cnkuYmluZGluZy5zZXJ2aWNlLmhvc3R9fTp7e21lcmN1cnkuYmluZGluZy5zZXJ2aWNlLnBvcnR9fS9jb20ucmVkaGF0Lm1lcmN1cnkuY3VzdG9tZXJjcmVkaXRyYXRpbmcudjEwLmFwaS5jcmN1c3RvbWVyY3JlZGl0cmF0aW5nc3RhdGVzZXJ2aWNlLkNSQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVNlcnZpY2U/c3luY2hyb25vdXM9dHJ1ZVx1MDAyNm1ldGhvZD1Jbml0aWF0ZVxuICAgICAgLSBtYXJzaGFsOlxuICAgICAgICAgIHByb3RvYnVmOlxuICAgICAgICAgICAgaW5zdGFuY2UtY2xhc3M6IGNvbS5yZWRoYXQubWVyY3VyeS5jdXN0b21lcmNyZWRpdHJhdGluZy52MTAuSW5pdGlhdGVDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVzcG9uc2VPdXRlckNsYXNzJEluaXRpYXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlXG4gICAgICAgICAgICBjb250ZW50LXR5cGUtZm9ybWF0OiBqc29uXG5cbi0gZnJvbTpcbiAgICB1cmk6IGRpcmVjdDpSZXRyaWV2ZVxuICAgIHN0ZXBzOlxuICAgICAgLSBzZXQtYm9keTpcbiAgICAgICAgICBzaW1wbGU6IFwie1xcXCJjdXN0b21lcmNyZWRpdHJhdGluZ0lkXFxcIjogXFxcIiR7aGVhZGVyLmN1c3RvbWVyY3JlZGl0cmF0aW5nSWR9XFxcIn1cIlxuICAgICAgLSB0bzpcbiAgICAgICAgICB1cmk6IGxvZzpleGFtcGxlP3Nob3dCb2R5PXRydWVcbiAgICAgIC0gdW5tYXJzaGFsOlxuICAgICAgICAgIHByb3RvYnVmOlxuICAgICAgICAgICAgaW5zdGFuY2UtY2xhc3M6IGNvbS5yZWRoYXQubWVyY3VyeS5jdXN0b21lcmNyZWRpdHJhdGluZy52MTAuYXBpLmNyY3VzdG9tZXJjcmVkaXRyYXRpbmdzdGF0ZXNlcnZpY2UuQ3JDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlU2VydmljZSRSZXRyaWV2ZVJlcXVlc3RcbiAgICAgICAgICAgIGNvbnRlbnQtdHlwZS1mb3JtYXQ6IGpzb25cbiAgICAgIC0gdG86XG4gICAgICAgICAgdXJpOiBncnBjOi8ve3ttZXJjdXJ5LmJpbmRpbmcuc2VydmljZS5ob3N0fX06e3ttZXJjdXJ5LmJpbmRpbmcuc2VydmljZS5wb3J0fX0vY29tLnJlZGhhdC5tZXJjdXJ5LmN1c3RvbWVyY3JlZGl0cmF0aW5nLnYxMC5hcGkuY3JjdXN0b21lcmNyZWRpdHJhdGluZ3N0YXRlc2VydmljZS5DUkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVTZXJ2aWNlP3N5bmNocm9ub3VzPXRydWVcdTAwMjZtZXRob2Q9cmV0cmlldmVcbiAgICAgIC0gbWFyc2hhbDpcbiAgICAgICAgICBwcm90b2J1ZjpcbiAgICAgICAgICAgIGluc3RhbmNlLWNsYXNzOiBjb20ucmVkaGF0Lm1lcmN1cnkuY3VzdG9tZXJjcmVkaXRyYXRpbmcudjEwLlJldHJpZXZlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlT3V0ZXJDbGFzcyRSZXRyaWV2ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXNwb25zZVxuICAgICAgICAgICAgY29udGVudC10eXBlLWZvcm1hdDoganNvbiJ9LCJraW5kIjoiQ29uZmlnTWFwIiwibWV0YWRhdGEiOnsibmFtZSI6ImludGVncmF0aW9uLWN1c3RvbWVyLWNyZWRpdC1yYXRpbmctaHR0cCJ9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7IkN1c3RvbWVyQ3JlZGl0UmF0aW5nLmpzb24iOiJ7XG4gIFwib3BlbmFwaVwiOiBcIjMuMC4xXCIsXG4gIFwiaW5mb1wiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIkN1c3RvbWVyIENyZWRpdCBSYXRpbmdcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBzZXJ2aWNlIGRvbWFpbiBtYWludGFpbnMgYW5kIGFkbWluaXN0ZXJzIHRoZSBiYW5rJ3MgY3JlZGl0IGFzc2Vzc21lbnQgZm9yIGN1c3RvbWVycyBiYXNlZCBvbiBjb25zb2xpZGF0ZWQgaW50ZXJuYWwgZGF0YSBhbmQgb3B0aW9uYWxseSBieSByZWZlcmVuY2luZyBleHRlcm5hbCBjcmVkaXQgYWdlbmN5IHJlcG9ydHNcIixcbiAgICBcInZlcnNpb25cIjogXCIxMC4wLjBcIlxuICB9LFxuICBcInBhdGhzXCI6IHtcbiAgICBcIi9DdXN0b21lckNyZWRpdFJhdGluZy9Jbml0aWF0ZVwiOiB7XG4gICAgICBcInBvc3RcIjoge1xuICAgICAgICBcInRhZ3NcIjogW1xuICAgICAgICAgIFwiQ1IgLSBDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJzdW1tYXJ5XCI6IFwiSW5DUiBJbml0aWF0ZSBjcmVkaXQgc3RhdGUgbW9uaXRvcmluZyBmb3IgYSBjdXN0b21lclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5DUiBJbml0aWF0ZSBjcmVkaXQgc3RhdGUgbW9uaXRvcmluZyBmb3IgYSBjdXN0b21lclwiLFxuICAgICAgICBcIm9wZXJhdGlvbklkXCI6IFwiSW5pdGlhdGVcIixcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IFtdLFxuICAgICAgICBcInJlcXVlc3RCb2R5XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvcmVxdWVzdEJvZGllcy9Jbml0aWF0ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXF1ZXN0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXNwb25zZXNcIjoge1xuICAgICAgICAgIFwiMjAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdWNjZXNzXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0luaXRpYXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYWQgUmVxdWVzdFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDFcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDNcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmJpZGRlblwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDRcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk5vdCBGb3VuZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MjlcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjUwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIi9DdXN0b21lckNyZWRpdFJhdGluZy97Y3VzdG9tZXJjcmVkaXRyYXRpbmdJZH0vRXhlY3V0ZVwiOiB7XG4gICAgICBcInB1dFwiOiB7XG4gICAgICAgIFwidGFnc1wiOiBbXG4gICAgICAgICAgXCJDUiAtIEN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICBdLFxuICAgICAgICBcInN1bW1hcnlcIjogXCJFeENSIEV4ZWN1dGUgYW4gYXV0b21hdGVkIHRhc2sgZm9yIGNyZWRpdCBzdGF0ZSAoZS5nLiBhdXRvIHJlZnJlc2gpXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFeENSIEV4ZWN1dGUgYW4gYXV0b21hdGVkIHRhc2sgZm9yIGNyZWRpdCBzdGF0ZSAoZS5nLiBhdXRvIHJlZnJlc2gpXCIsXG4gICAgICAgIFwib3BlcmF0aW9uSWRcIjogXCJFeGVjdXRlXCIsXG4gICAgICAgIFwicGFyYW1ldGVyc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY3VzdG9tZXJjcmVkaXRyYXRpbmdJZFwiLFxuICAgICAgICAgICAgXCJpblwiOiBcInBhdGhcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgICAgIFwiZXhwbG9kZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicmVxdWVzdEJvZHlcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9yZXF1ZXN0Qm9kaWVzL0V4ZWN1dGVDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVxdWVzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVzcG9uc2VzXCI6IHtcbiAgICAgICAgICBcIjIwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3VjY2Vzc1wiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9FeGVjdXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYWQgUmVxdWVzdFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDFcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDNcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmJpZGRlblwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDRcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk5vdCBGb3VuZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MjlcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjUwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIi9DdXN0b21lckNyZWRpdFJhdGluZy97Y3VzdG9tZXJjcmVkaXRyYXRpbmdJZH0vUmVxdWVzdFwiOiB7XG4gICAgICBcInB1dFwiOiB7XG4gICAgICAgIFwidGFnc1wiOiBbXG4gICAgICAgICAgXCJDUiAtIEN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICBdLFxuICAgICAgICBcInN1bW1hcnlcIjogXCJScUNSIFJlcXVlc3QgbWFudWFsIGludGVydmVudGlvbiBmb3IgY3JlZGl0IHN0YXRlIChlLmcuIHJldmlzZSB1bmRlcmx5aW5nIGFzc2Vzc21lbnQpXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJScUNSIFJlcXVlc3QgbWFudWFsIGludGVydmVudGlvbiBmb3IgY3JlZGl0IHN0YXRlIChlLmcuIHJldmlzZSB1bmRlcmx5aW5nIGFzc2Vzc21lbnQpXCIsXG4gICAgICAgIFwib3BlcmF0aW9uSWRcIjogXCJSZXF1ZXN0XCIsXG4gICAgICAgIFwicGFyYW1ldGVyc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY3VzdG9tZXJjcmVkaXRyYXRpbmdJZFwiLFxuICAgICAgICAgICAgXCJpblwiOiBcInBhdGhcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgICAgIFwiZXhwbG9kZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicmVxdWVzdEJvZHlcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9yZXF1ZXN0Qm9kaWVzL1JlcXVlc3RDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVxdWVzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVzcG9uc2VzXCI6IHtcbiAgICAgICAgICBcIjIwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3VjY2Vzc1wiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9SZXF1ZXN0Q3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYWQgUmVxdWVzdFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDFcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDNcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmJpZGRlblwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDRcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk5vdCBGb3VuZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MjlcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjUwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIi9DdXN0b21lckNyZWRpdFJhdGluZy97Y3VzdG9tZXJjcmVkaXRyYXRpbmdJZH0vUmV0cmlldmVcIjoge1xuICAgICAgXCJnZXRcIjoge1xuICAgICAgICBcInRhZ3NcIjogW1xuICAgICAgICAgIFwiQ1IgLSBDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJzdW1tYXJ5XCI6IFwiUmVDUiBSZXRyaWV2ZSBkZXRhaWxzIGFib3V0IGNyZWRpdCBzdGF0ZSBtb25pdG9yaW5nIGZvciBhIGN1c3RvbWVyXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSZUNSIFJldHJpZXZlIGRldGFpbHMgYWJvdXQgY3JlZGl0IHN0YXRlIG1vbml0b3JpbmcgZm9yIGEgY3VzdG9tZXJcIixcbiAgICAgICAgXCJvcGVyYXRpb25JZFwiOiBcIlJldHJpZXZlXCIsXG4gICAgICAgIFwicGFyYW1ldGVyc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY3VzdG9tZXJjcmVkaXRyYXRpbmdJZFwiLFxuICAgICAgICAgICAgXCJpblwiOiBcInBhdGhcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgICAgIFwiZXhwbG9kZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicmVzcG9uc2VzXCI6IHtcbiAgICAgICAgICBcIjIwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3VjY2Vzc1wiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9SZXRyaWV2ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXNwb25zZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmFkIFJlcXVlc3RcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAxXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAzXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGb3JiaWRkZW5cIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDA0XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJOb3QgRm91bmRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDI5XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUb28gTWFueSBSZXF1ZXN0c1wiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI1MDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCIvQ3VzdG9tZXJDcmVkaXRSYXRpbmcve2N1c3RvbWVyY3JlZGl0cmF0aW5nSWR9L0FsZXJ0cy97YWxlcnRzSWR9L0NhcHR1cmVcIjoge1xuICAgICAgXCJwdXRcIjoge1xuICAgICAgICBcInRhZ3NcIjogW1xuICAgICAgICAgIFwiQlEgLSBBbGVydHNcIlxuICAgICAgICBdLFxuICAgICAgICBcInN1bW1hcnlcIjogXCJDYUJRIENhcHR1cmUgbm90aWZpY2F0aW9uIG9mIGEgY3JlZGl0IGFsZXJ0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDYUJRIENhcHR1cmUgbm90aWZpY2F0aW9uIG9mIGEgY3JlZGl0IGFsZXJ0XCIsXG4gICAgICAgIFwib3BlcmF0aW9uSWRcIjogXCJDYXB0dXJlQWxlcnRzXCIsXG4gICAgICAgIFwicGFyYW1ldGVyc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY3VzdG9tZXJjcmVkaXRyYXRpbmdJZFwiLFxuICAgICAgICAgICAgXCJpblwiOiBcInBhdGhcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgICAgIFwiZXhwbG9kZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImFsZXJ0c0lkXCIsXG4gICAgICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJyZXF1ZXN0Qm9keVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3JlcXVlc3RCb2RpZXMvQ2FwdHVyZUFsZXJ0c1JlcXVlc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlc3BvbnNlc1wiOiB7XG4gICAgICAgICAgXCIyMDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUFsZXJ0c1Jlc3BvbnNlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYWQgUmVxdWVzdFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDFcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDNcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmJpZGRlblwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDRcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk5vdCBGb3VuZFwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MjlcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjUwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIi9DdXN0b21lckNyZWRpdFJhdGluZy97Y3VzdG9tZXJjcmVkaXRyYXRpbmdJZH0vQWxlcnRzL3thbGVydHNJZH0vUmV0cmlldmVcIjoge1xuICAgICAgXCJnZXRcIjoge1xuICAgICAgICBcInRhZ3NcIjogW1xuICAgICAgICAgIFwiQlEgLSBBbGVydHNcIlxuICAgICAgICBdLFxuICAgICAgICBcInN1bW1hcnlcIjogXCJSZUJRIFJldHJpZXZlIGRldGFpbHMgYWJvdXQgYSBjcmVkaXQgYWxlcnRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJlQlEgUmV0cmlldmUgZGV0YWlscyBhYm91dCBhIGNyZWRpdCBhbGVydFwiLFxuICAgICAgICBcIm9wZXJhdGlvbklkXCI6IFwiUmV0cmlldmVBbGVydHNcIixcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjdXN0b21lcmNyZWRpdHJhdGluZ0lkXCIsXG4gICAgICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYWxlcnRzSWRcIixcbiAgICAgICAgICAgIFwiaW5cIjogXCJwYXRoXCIsXG4gICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwic2ltcGxlXCIsXG4gICAgICAgICAgICBcImV4cGxvZGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInJlc3BvbnNlc1wiOiB7XG4gICAgICAgICAgXCIyMDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvUmV0cmlldmVBbGVydHNSZXNwb25zZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmFkIFJlcXVlc3RcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAxXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAzXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGb3JiaWRkZW5cIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDA0XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJOb3QgRm91bmRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDI5XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUb28gTWFueSBSZXF1ZXN0c1wiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI1MDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCIvQ3VzdG9tZXJDcmVkaXRSYXRpbmcve2N1c3RvbWVyY3JlZGl0cmF0aW5nSWR9L0ludGVybmFsUmVwb3J0aW5nL3tpbnRlcm5hbHJlcG9ydGluZ0lkfS9DYXB0dXJlXCI6IHtcbiAgICAgIFwicHV0XCI6IHtcbiAgICAgICAgXCJ0YWdzXCI6IFtcbiAgICAgICAgICBcIkJRIC0gSW50ZXJuYWxSZXBvcnRpbmdcIlxuICAgICAgICBdLFxuICAgICAgICBcInN1bW1hcnlcIjogXCJDYUJRIENhcHR1cmUgaW50ZXJuYWwgcHJvZHVjdCByZXBvcnRzIHRvIHN1cHBvcnQgY3JlZGl0IGFuYWx5c2lzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDYUJRIENhcHR1cmUgaW50ZXJuYWwgcHJvZHVjdCByZXBvcnRzIHRvIHN1cHBvcnQgY3JlZGl0IGFuYWx5c2lzXCIsXG4gICAgICAgIFwib3BlcmF0aW9uSWRcIjogXCJDYXB0dXJlSW50ZXJuYWxSZXBvcnRpbmdcIixcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjdXN0b21lcmNyZWRpdHJhdGluZ0lkXCIsXG4gICAgICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW50ZXJuYWxyZXBvcnRpbmdJZFwiLFxuICAgICAgICAgICAgXCJpblwiOiBcInBhdGhcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgICAgIFwiZXhwbG9kZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicmVxdWVzdEJvZHlcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9yZXF1ZXN0Qm9kaWVzL0NhcHR1cmVJbnRlcm5hbFJlcG9ydGluZ1JlcXVlc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlc3BvbnNlc1wiOiB7XG4gICAgICAgICAgXCIyMDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUludGVybmFsUmVwb3J0aW5nUmVzcG9uc2VcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJhZCBSZXF1ZXN0XCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwMVwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVW5hdXRob3JpemVkXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwM1wiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yYmlkZGVuXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwNFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTm90IEZvdW5kXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQyOVwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVG9vIE1hbnkgUmVxdWVzdHNcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNTAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiL0N1c3RvbWVyQ3JlZGl0UmF0aW5nL3tjdXN0b21lcmNyZWRpdHJhdGluZ0lkfS9JbnRlcm5hbFJlcG9ydGluZy97aW50ZXJuYWxyZXBvcnRpbmdJZH0vUmV0cmlldmVcIjoge1xuICAgICAgXCJnZXRcIjoge1xuICAgICAgICBcInRhZ3NcIjogW1xuICAgICAgICAgIFwiQlEgLSBJbnRlcm5hbFJlcG9ydGluZ1wiXG4gICAgICAgIF0sXG4gICAgICAgIFwic3VtbWFyeVwiOiBcIlJlQlEgUmV0cmlldmUgZGV0YWlscyBhYm91dCBpbnRlcm5hbCByZXBvcnRpbmcgdG8gdGhlIGNyZWRpdCBtb25pdG9yaW5nIGFjdGl2aXR5XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSZUJRIFJldHJpZXZlIGRldGFpbHMgYWJvdXQgaW50ZXJuYWwgcmVwb3J0aW5nIHRvIHRoZSBjcmVkaXQgbW9uaXRvcmluZyBhY3Rpdml0eVwiLFxuICAgICAgICBcIm9wZXJhdGlvbklkXCI6IFwiUmV0cmlldmVJbnRlcm5hbFJlcG9ydGluZ1wiLFxuICAgICAgICBcInBhcmFtZXRlcnNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImN1c3RvbWVyY3JlZGl0cmF0aW5nSWRcIixcbiAgICAgICAgICAgIFwiaW5cIjogXCJwYXRoXCIsXG4gICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwic2ltcGxlXCIsXG4gICAgICAgICAgICBcImV4cGxvZGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJpbnRlcm5hbHJlcG9ydGluZ0lkXCIsXG4gICAgICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJyZXNwb25zZXNcIjoge1xuICAgICAgICAgIFwiMjAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdWNjZXNzXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL1JldHJpZXZlSW50ZXJuYWxSZXBvcnRpbmdSZXNwb25zZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmFkIFJlcXVlc3RcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAxXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAzXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGb3JiaWRkZW5cIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDA0XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJOb3QgRm91bmRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDI5XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUb28gTWFueSBSZXF1ZXN0c1wiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI1MDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCIvQ3VzdG9tZXJDcmVkaXRSYXRpbmcve2N1c3RvbWVyY3JlZGl0cmF0aW5nSWR9L0V4dGVybmFsUmVwb3J0aW5nL3tleHRlcm5hbHJlcG9ydGluZ0lkfS9DYXB0dXJlXCI6IHtcbiAgICAgIFwicHV0XCI6IHtcbiAgICAgICAgXCJ0YWdzXCI6IFtcbiAgICAgICAgICBcIkJRIC0gRXh0ZXJuYWxSZXBvcnRpbmdcIlxuICAgICAgICBdLFxuICAgICAgICBcInN1bW1hcnlcIjogXCJDYUJRIENhcHR1cmUgZXh0ZXJuYWwgY3JlZGl0IHJlcG9ydHMgdG8gc3VwcG9ydCBjcmVkaXQgYW5hbHlzaXMgYW5kIHN0YXRlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDYUJRIENhcHR1cmUgZXh0ZXJuYWwgY3JlZGl0IHJlcG9ydHMgdG8gc3VwcG9ydCBjcmVkaXQgYW5hbHlzaXMgYW5kIHN0YXRlXCIsXG4gICAgICAgIFwib3BlcmF0aW9uSWRcIjogXCJDYXB0dXJlRXh0ZXJuYWxSZXBvcnRpbmdcIixcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjdXN0b21lcmNyZWRpdHJhdGluZ0lkXCIsXG4gICAgICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZXh0ZXJuYWxyZXBvcnRpbmdJZFwiLFxuICAgICAgICAgICAgXCJpblwiOiBcInBhdGhcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgICAgIFwiZXhwbG9kZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicmVxdWVzdEJvZHlcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9yZXF1ZXN0Qm9kaWVzL0NhcHR1cmVFeHRlcm5hbFJlcG9ydGluZ1JlcXVlc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlc3BvbnNlc1wiOiB7XG4gICAgICAgICAgXCIyMDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUV4dGVybmFsUmVwb3J0aW5nUmVzcG9uc2VcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI0MDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJhZCBSZXF1ZXN0XCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwMVwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVW5hdXRob3JpemVkXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwM1wiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yYmlkZGVuXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwNFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTm90IEZvdW5kXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQyOVwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVG9vIE1hbnkgUmVxdWVzdHNcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNTAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiL0N1c3RvbWVyQ3JlZGl0UmF0aW5nL3tjdXN0b21lcmNyZWRpdHJhdGluZ0lkfS9FeHRlcm5hbFJlcG9ydGluZy97ZXh0ZXJuYWxyZXBvcnRpbmdJZH0vUmV0cmlldmVcIjoge1xuICAgICAgXCJnZXRcIjoge1xuICAgICAgICBcInRhZ3NcIjogW1xuICAgICAgICAgIFwiQlEgLSBFeHRlcm5hbFJlcG9ydGluZ1wiXG4gICAgICAgIF0sXG4gICAgICAgIFwic3VtbWFyeVwiOiBcIlJlQlEgUmV0cmlldmUgZGV0YWlscyBhYm91dCBleHRlcm5hbCByZXBvcnRpbmcgdG8gdGhlIGNyZWRpdCBtb25pdG9yaW5nIGFjdGl2aXR5XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSZUJRIFJldHJpZXZlIGRldGFpbHMgYWJvdXQgZXh0ZXJuYWwgcmVwb3J0aW5nIHRvIHRoZSBjcmVkaXQgbW9uaXRvcmluZyBhY3Rpdml0eVwiLFxuICAgICAgICBcIm9wZXJhdGlvbklkXCI6IFwiUmV0cmlldmVFeHRlcm5hbFJlcG9ydGluZ1wiLFxuICAgICAgICBcInBhcmFtZXRlcnNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImN1c3RvbWVyY3JlZGl0cmF0aW5nSWRcIixcbiAgICAgICAgICAgIFwiaW5cIjogXCJwYXRoXCIsXG4gICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwic2ltcGxlXCIsXG4gICAgICAgICAgICBcImV4cGxvZGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJleHRlcm5hbHJlcG9ydGluZ0lkXCIsXG4gICAgICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJyZXNwb25zZXNcIjoge1xuICAgICAgICAgIFwiMjAwXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdWNjZXNzXCIsXG4gICAgICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL1JldHJpZXZlRXh0ZXJuYWxSZXBvcnRpbmdSZXNwb25zZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIjQwMFwiOiB7XG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmFkIFJlcXVlc3RcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAxXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDAzXCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGb3JiaWRkZW5cIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDA0XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJOb3QgRm91bmRcIixcbiAgICAgICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiNDI5XCI6IHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUb28gTWFueSBSZXF1ZXN0c1wiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCI1MDBcIjoge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiLFxuICAgICAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgXCJjb21wb25lbnRzXCI6IHtcbiAgICBcInNjaGVtYXNcIjoge1xuICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJDdXN0b21lclJlZmVyZW5jZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1N0YXR1c1R5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdTY2hlZHVsZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ0Fzc2Vzc21lbnRSZWNvcmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQXNzZXNzbWVudEN1c3RvbWVyQmVoYXZpb3JNb2RlbFJlZmVyZW5jZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDcmVkaXRSYXRpbmdBc3Nlc3NtZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDcmVkaXRSYXRpbmdBc3Nlc3NtZW50RGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDcmVkaXRSYXRpbmdBc3Nlc3NtZW50V29ya1Byb2R1Y3RzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWRpdFJhdGluZ0Fzc2Vzc21lbnRSZXN1bHRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdSZWNvcmRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ0Fzc2Vzc21lbnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdOYXJyYXRpdmVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdEYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJFeHRlcm5hbFJlcG9ydGluZ1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiUmF0aW5nQWdlbmN5UmVwb3J0U2NoZWR1bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUmF0aW5nQWdlbmN5Q3JlZGl0UmVwb3J0VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJSZWZlcmVuY2V0b3RoZXJhdGluZ2FnZW5jeWNyZWRpdHJlcG9ydFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJSYXRpbmdBZ2VuY3lDcmVkaXRSZXBvcnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUmF0aW5nQWdlbmN5Q3JlZGl0UmVwb3J0RGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiQWxlcnRzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJQcm9kdWN0SW5zdGFuY2VSZWZlcmVuY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiRW1wbG95ZWUvQnVzaW5lc3NVbml0UmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0QWxlcnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0QWxlcnREZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJEYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJJbnRlcm5hbFJlcG9ydGluZ1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiUHJvZHVjdGFuZFNlcnZpY2VBY3Rpdml0eVJlcG9ydFJlZmVyZW5jZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJQcm9kdWN0YW5kU2VydmljZUFjdGl2aXR5UmVwb3J0U2NoZWR1bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUHJvZHVjdGFuZFNlcnZpY2VBY3Rpdml0eVJlcG9ydFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiSFRUUEVycm9yXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJzdGF0dXNfY29kZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiSW5pdGlhdGVDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVxdWVzdFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9Jbml0aWF0ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXF1ZXN0X0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiSW5pdGlhdGVDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVzcG9uc2VcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSW5pdGlhdGVDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVzcG9uc2VfQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJFeGVjdXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlcXVlc3RcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvRXhlY3V0ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXF1ZXN0X0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiRXhlY3V0ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXNwb25zZVwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9FeGVjdXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlX0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiUmVxdWVzdEN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXF1ZXN0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0V4ZWN1dGVDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVxdWVzdF9DdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlJlcXVlc3RDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVzcG9uc2VcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvRXhlY3V0ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXNwb25zZV9DdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlJldHJpZXZlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL1JldHJpZXZlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlX0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiQ2FwdHVyZUFsZXJ0c1JlcXVlc3RcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUFsZXJ0c1JlcXVlc3RfQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkFsZXJ0c1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9DYXB0dXJlQWxlcnRzUmVxdWVzdF9BbGVydHNcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiQ2FwdHVyZUFsZXJ0c1Jlc3BvbnNlXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJBbGVydHNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUFsZXJ0c1Jlc3BvbnNlX0FsZXJ0c1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJSZXRyaWV2ZUFsZXJ0c1Jlc3BvbnNlXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0NhcHR1cmVBbGVydHNSZXF1ZXN0X0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJBbGVydHNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUFsZXJ0c1JlcXVlc3RfQWxlcnRzXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIkNhcHR1cmVJbnRlcm5hbFJlcG9ydGluZ1JlcXVlc3RcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUFsZXJ0c1JlcXVlc3RfQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkludGVybmFsUmVwb3J0aW5nXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0NhcHR1cmVJbnRlcm5hbFJlcG9ydGluZ1JlcXVlc3RfSW50ZXJuYWxSZXBvcnRpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiQ2FwdHVyZUludGVybmFsUmVwb3J0aW5nUmVzcG9uc2VcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkludGVybmFsUmVwb3J0aW5nXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0NhcHR1cmVJbnRlcm5hbFJlcG9ydGluZ1Jlc3BvbnNlX0ludGVybmFsUmVwb3J0aW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlJldHJpZXZlSW50ZXJuYWxSZXBvcnRpbmdSZXNwb25zZVwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9DYXB0dXJlQWxlcnRzUmVxdWVzdF9DdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiSW50ZXJuYWxSZXBvcnRpbmdcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUludGVybmFsUmVwb3J0aW5nUmVxdWVzdF9JbnRlcm5hbFJlcG9ydGluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJDYXB0dXJlRXh0ZXJuYWxSZXBvcnRpbmdSZXF1ZXN0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0NhcHR1cmVBbGVydHNSZXF1ZXN0X0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJFeHRlcm5hbFJlcG9ydGluZ1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9DYXB0dXJlRXh0ZXJuYWxSZXBvcnRpbmdSZXF1ZXN0X0V4dGVybmFsUmVwb3J0aW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIkNhcHR1cmVFeHRlcm5hbFJlcG9ydGluZ1Jlc3BvbnNlXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJFeHRlcm5hbFJlcG9ydGluZ1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9DYXB0dXJlRXh0ZXJuYWxSZXBvcnRpbmdSZXNwb25zZV9FeHRlcm5hbFJlcG9ydGluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJSZXRyaWV2ZUV4dGVybmFsUmVwb3J0aW5nUmVzcG9uc2VcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUFsZXJ0c1JlcXVlc3RfQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkV4dGVybmFsUmVwb3J0aW5nXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL1JldHJpZXZlRXh0ZXJuYWxSZXBvcnRpbmdSZXNwb25zZV9FeHRlcm5hbFJlcG9ydGluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJJbml0aWF0ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXF1ZXN0X0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyUmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdHVzVHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1NjaGVkdWxlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nQXNzZXNzbWVudFJlY29yZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1JlY29yZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ0RhdGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIkluaXRpYXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlX0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU2NoZWR1bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3VzdG9tZXJDcmVkaXRSYXRpbmdBc3Nlc3NtZW50UmVjb3JkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nUmVjb3JkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nTmFycmF0aXZlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nRGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiRXhlY3V0ZUN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXF1ZXN0X0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nQXNzZXNzbWVudFJlY29yZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJBc3Nlc3NtZW50Q3VzdG9tZXJCZWhhdmlvck1vZGVsUmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWRpdFJhdGluZ0Fzc2Vzc21lbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWRpdFJhdGluZ0Fzc2Vzc21lbnREYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJFeGVjdXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlX0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nQXNzZXNzbWVudFJlY29yZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDcmVkaXRSYXRpbmdBc3Nlc3NtZW50RGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDcmVkaXRSYXRpbmdBc3Nlc3NtZW50V29ya1Byb2R1Y3RzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWRpdFJhdGluZ0Fzc2Vzc21lbnRSZXN1bHRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlJldHJpZXZlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlc3BvbnNlX0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyUmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdHVzVHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1NjaGVkdWxlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nQXNzZXNzbWVudFJlY29yZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJBc3Nlc3NtZW50Q3VzdG9tZXJCZWhhdmlvck1vZGVsUmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWRpdFJhdGluZ0Fzc2Vzc21lbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWRpdFJhdGluZ0Fzc2Vzc21lbnREYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNyZWRpdFJhdGluZ0Fzc2Vzc21lbnRXb3JrUHJvZHVjdHNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ3JlZGl0UmF0aW5nQXNzZXNzbWVudFJlc3VsdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ1JlY29yZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ05hcnJhdGl2ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21lckNyZWRpdFJhdGluZ0RhdGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIkNhcHR1cmVBbGVydHNSZXF1ZXN0X0N1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkN1c3RvbWVyUmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJDYXB0dXJlQWxlcnRzUmVxdWVzdF9BbGVydHNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIlByb2R1Y3RJbnN0YW5jZVJlZmVyZW5jZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJFbXBsb3llZU9yQnVzaW5lc3NVbml0UmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0QWxlcnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkN1c3RvbWVyQ3JlZGl0QWxlcnREZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJEYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJDYXB0dXJlQWxlcnRzUmVzcG9uc2VfQWxlcnRzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJEYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJDYXB0dXJlSW50ZXJuYWxSZXBvcnRpbmdSZXF1ZXN0X0ludGVybmFsUmVwb3J0aW5nXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJQcm9kdWN0YW5kU2VydmljZUFjdGl2aXR5UmVwb3J0UmVmZXJlbmNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlByb2R1Y3RhbmRTZXJ2aWNlQWN0aXZpdHlSZXBvcnRTY2hlZHVsZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiQ2FwdHVyZUludGVybmFsUmVwb3J0aW5nUmVzcG9uc2VfSW50ZXJuYWxSZXBvcnRpbmdcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIlByb2R1Y3RhbmRTZXJ2aWNlQWN0aXZpdHlSZXBvcnRTY2hlZHVsZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiQ2FwdHVyZUV4dGVybmFsUmVwb3J0aW5nUmVxdWVzdF9FeHRlcm5hbFJlcG9ydGluZ1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiUmF0aW5nQWdlbmN5UmVwb3J0U2NoZWR1bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUmF0aW5nQWdlbmN5Q3JlZGl0UmVwb3J0VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJSYXRpbmdBZ2VuY3lDcmVkaXRSZXBvcnREYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJDYXB0dXJlRXh0ZXJuYWxSZXBvcnRpbmdSZXNwb25zZV9FeHRlcm5hbFJlcG9ydGluZ1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiUmF0aW5nQWdlbmN5UmVwb3J0U2NoZWR1bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUmVmZXJlbmNldG90aGVyYXRpbmdhZ2VuY3ljcmVkaXRyZXBvcnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUmF0aW5nQWdlbmN5Q3JlZGl0UmVwb3J0RGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiUmV0cmlldmVFeHRlcm5hbFJlcG9ydGluZ1Jlc3BvbnNlX0V4dGVybmFsUmVwb3J0aW5nXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJSYXRpbmdBZ2VuY3lSZXBvcnRTY2hlZHVsZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJSYXRpbmdBZ2VuY3lDcmVkaXRSZXBvcnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlJlZmVyZW5jZXRvdGhlcmF0aW5nYWdlbmN5Y3JlZGl0cmVwb3J0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlJhdGluZ0FnZW5jeUNyZWRpdFJlcG9ydERhdGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwicmVzcG9uc2VzXCI6IHtcbiAgICAgIFwiSFRUUEVycm9yXCI6IHtcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJhZCBSZXF1ZXN0XCIsXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIkJhZFJlcXVlc3RFcnJvclwiOiB7XG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYWQgUmVxdWVzdFwiLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0hUVFBFcnJvclwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJVbmF1dGhvcml6ZWRFcnJvclwiOiB7XG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgICAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2NvbXBvbmVudHMvc2NoZW1hcy9IVFRQRXJyb3JcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiRm9yYmlkZGVuRXJyb3JcIjoge1xuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yYmlkZGVuXCIsXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIk5vdEZvdW5kRXJyb3JcIjoge1xuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTm90IEZvdW5kXCIsXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlRvb01hbnlSZXF1ZXN0c0Vycm9yXCI6IHtcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIkludGVybmFsU2VydmVyRXJyb3JcIjoge1xuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvSFRUUEVycm9yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwicGFyYW1ldGVyc1wiOiB7XG4gICAgICBcIkN1c3RvbWVyQ3JlZGl0UmF0aW5nSURcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJjdXN0b21lcmNyZWRpdHJhdGluZ0lkXCIsXG4gICAgICAgIFwiaW5cIjogXCJwYXRoXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICAgICAgXCJzdHlsZVwiOiBcInNpbXBsZVwiLFxuICAgICAgICBcImV4cGxvZGVcIjogZmFsc2UsXG4gICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJFeHRlcm5hbFJlcG9ydGluZ0lEXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiZXh0ZXJuYWxyZXBvcnRpbmdJZFwiLFxuICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiQWxlcnRzSURcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJhbGVydHNJZFwiLFxuICAgICAgICBcImluXCI6IFwicGF0aFwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IHRydWUsXG4gICAgICAgIFwic3R5bGVcIjogXCJzaW1wbGVcIixcbiAgICAgICAgXCJleHBsb2RlXCI6IGZhbHNlLFxuICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiSW50ZXJuYWxSZXBvcnRpbmdJRFwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcImludGVybmFscmVwb3J0aW5nSWRcIixcbiAgICAgICAgXCJpblwiOiBcInBhdGhcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlLFxuICAgICAgICBcInN0eWxlXCI6IFwic2ltcGxlXCIsXG4gICAgICAgIFwiZXhwbG9kZVwiOiBmYWxzZSxcbiAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwicmVxdWVzdEJvZGllc1wiOiB7XG4gICAgICBcIkluaXRpYXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlcXVlc3RcIjoge1xuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0luaXRpYXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlcXVlc3RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICB9LFxuICAgICAgXCJFeGVjdXRlQ3VzdG9tZXJDcmVkaXRSYXRpbmdTdGF0ZVJlcXVlc3RcIjoge1xuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0V4ZWN1dGVDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVxdWVzdFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgIH0sXG4gICAgICBcIlJlcXVlc3RDdXN0b21lckNyZWRpdFJhdGluZ1N0YXRlUmVxdWVzdFwiOiB7XG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvUmVxdWVzdEN1c3RvbWVyQ3JlZGl0UmF0aW5nU3RhdGVSZXF1ZXN0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIFwiQ2FwdHVyZUFsZXJ0c1JlcXVlc3RcIjoge1xuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0NhcHR1cmVBbGVydHNSZXF1ZXN0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIFwiQ2FwdHVyZUludGVybmFsUmVwb3J0aW5nUmVxdWVzdFwiOiB7XG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICAgICAgICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FwdHVyZUludGVybmFsUmVwb3J0aW5nUmVxdWVzdFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgIH0sXG4gICAgICBcIkNhcHR1cmVFeHRlcm5hbFJlcG9ydGluZ1JlcXVlc3RcIjoge1xuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvY29tcG9uZW50cy9zY2hlbWFzL0NhcHR1cmVFeHRlcm5hbFJlcG9ydGluZ1JlcXVlc3RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG59In0sImtpbmQiOiJDb25maWdNYXAiLCJtZXRhZGF0YSI6eyJuYW1lIjoiY3VzdG9tZXItY3JlZGl0LXJhdGluZy1vcGVuYXBpIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImRpcmVjdHMueWFtbCI6IiMgY2FtZWwtazogbGFuZ3VhZ2U9eWFtbFxuIyBjYW1lbC1rOiBkZXBlbmRlbmN5PWNhbWVsLXF1YXJrdXMtcHJvdG9idWZcbiMgY2FtZWwtazogZGVwZW5kZW5jeT1tdm46Y29tLnJlZGhhdC5tZXJjdXJ5OmN1c3RvbWVyLW9mZmVyLWNvbW1vbjoxLjAuMS1TTkFQU0hPVFxuXG4tIGZyb206XG4gICAgdXJpOiBkaXJlY3Q6SW5pdGlhdGVcbiAgICBzdGVwczpcbiAgICAgIC0gdW5tYXJzaGFsOlxuICAgICAgICAgIHByb3RvYnVmOlxuICAgICAgICAgICAgaW5zdGFuY2UtY2xhc3M6IGNvbS5yZWRoYXQubWVyY3VyeS5jdXN0b21lcm9mZmVyLnYxMC5hcGkuY3JjdXN0b21lcm9mZmVycHJvY2VkdXJlc2VydmljZS5DckN1c3RvbWVyT2ZmZXJQcm9jZWR1cmVTZXJ2aWNlJEluaXRpYXRlUmVxdWVzdFxuICAgICAgICAgICAgY29udGVudC10eXBlLWZvcm1hdDoganNvblxuICAgICAgLSB0bzpcbiAgICAgICAgICB1cmk6IGdycGM6Ly97e21lcmN1cnkuYmluZGluZy5zZXJ2aWNlLmhvc3R9fTp7e21lcmN1cnkuYmluZGluZy5zZXJ2aWNlLnBvcnR9fS9jb20ucmVkaGF0Lm1lcmN1cnkuY3VzdG9tZXJvZmZlci52MTAuYXBpLmNyY3VzdG9tZXJvZmZlcnByb2NlZHVyZXNlcnZpY2UuQ1JDdXN0b21lck9mZmVyUHJvY2VkdXJlU2VydmljZT9zeW5jaHJvbm91cz10cnVlXHUwMDI2bWV0aG9kPUluaXRpYXRlXG4gICAgICAtIG1hcnNoYWw6XG4gICAgICAgICAgcHJvdG9idWY6XG4gICAgICAgICAgICBpbnN0YW5jZS1jbGFzczogY29tLnJlZGhhdC5tZXJjdXJ5LmN1c3RvbWVyb2ZmZXIudjEwLkluaXRpYXRlQ3VzdG9tZXJPZmZlclByb2NlZHVyZVJlc3BvbnNlT3V0ZXJDbGFzcyRJbml0aWF0ZUN1c3RvbWVyT2ZmZXJQcm9jZWR1cmVSZXNwb25zZVxuICAgICAgICAgICAgY29udGVudC10eXBlLWZvcm1hdDoganNvblxuXG4tIGZyb206XG4gICAgdXJpOiBkaXJlY3Q6VXBkYXRlXG4gICAgc3RlcHM6XG4gICAgICAtIHNldC1ib2R5OlxuICAgICAgICAgIHNpbXBsZTogXCJ7XFxcImN1c3RvbWVyb2ZmZXJJZFxcXCI6IFxcXCIke2hlYWRlci5jdXN0b21lcm9mZmVySWR9XFxcIiwgXFxcImN1c3RvbWVyT2ZmZXJQcm9jZWR1cmVcXFwiOiAke2JvZHl9fVwiXG4gICAgICAtIHVubWFyc2hhbDpcbiAgICAgICAgICBwcm90b2J1ZjpcbiAgICAgICAgICAgIGluc3RhbmNlLWNsYXNzOiBjb20ucmVkaGF0Lm1lcmN1cnkuY3VzdG9tZXJvZmZlci52MTAuYXBpLmNyY3VzdG9tZXJvZmZlcnByb2NlZHVyZXNlcnZpY2UuQ3JDdXN0b21lck9mZmVyUHJvY2VkdXJlU2VydmljZSRVcGRhdGVSZXF1ZXN0XG4gICAgICAgICAgICBjb250ZW50LXR5cGUtZm9ybWF0OiBqc29uXG4gICAgICAtIHRvOlxuICAgICAgICAgIHVyaTogZ3JwYzovL3t7bWVyY3VyeS5iaW5kaW5nLnNlcnZpY2UuaG9zdH19Ont7bWVyY3VyeS5iaW5kaW5nLnNlcnZpY2UucG9ydH19L2NvbS5yZWRoYXQubWVyY3VyeS5jdXN0b21lcm9mZmVyLnYxMC5hcGkuY3JjdXN0b21lcm9mZmVycHJvY2VkdXJlc2VydmljZS5DUkN1c3RvbWVyT2ZmZXJQcm9jZWR1cmVTZXJ2aWNlP3N5bmNocm9ub3VzPXRydWVcdTAwMjZtZXRob2Q9VXBkYXRlXG4gICAgICAtIG1hcnNoYWw6XG4gICAgICAgICAgcHJvdG9idWY6XG4gICAgICAgICAgICBpbnN0YW5jZS1jbGFzczogY29tLnJlZGhhdC5tZXJjdXJ5LmN1c3RvbWVyb2ZmZXIudjEwLkN1c3RvbWVyT2ZmZXJQcm9jZWR1cmVPdXRlckNsYXNzJEN1c3RvbWVyT2ZmZXJQcm9jZWR1cmVcbiAgICAgICAgICAgIGNvbnRlbnQtdHlwZS1mb3JtYXQ6IGpzb24ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJpbnRlZ3JhdGlvbi1jdXN0b21lci1vZmZlci1odHRwIn19
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImRpcmVjdHMueWFtbCI6IiMgY2FtZWwtazogbGFuZ3VhZ2U9eWFtbFxuIyBjYW1lbC1rOiBkZXBlbmRlbmN5PWNhbWVsLXF1YXJrdXMtcHJvdG9idWZcbiMgY2FtZWwtazogZGVwZW5kZW5jeT1tdm46Y29tLnJlZGhhdC5tZXJjdXJ5OnBhcnR5LXJvdXRpbmctcHJvZmlsZS1jb21tb246MS4wLjEtU05BUFNIT1RcblxuLSBmcm9tOlxuICAgIHVyaTogZGlyZWN0OlJldHJpZXZlXG4gICAgc3RlcHM6XG4gICAgICAtIHNldC1ib2R5OlxuICAgICAgICAgIHNpbXBsZTogXCJ7XFxcInBhcnR5cm91dGluZ3Byb2ZpbGVJZFxcXCI6IFxcXCIke2hlYWRlci5wYXJ0eXJvdXRpbmdwcm9maWxlSWR9XFxcIn1cIlxuICAgICAgLSB1bm1hcnNoYWw6XG4gICAgICAgICAgcHJvdG9idWY6XG4gICAgICAgICAgICBpbnN0YW5jZS1jbGFzczogY29tLnJlZGhhdC5tZXJjdXJ5LnBhcnR5cm91dGluZ3Byb2ZpbGUudjEwLmFwaS5icXN0YXR1c3NlcnZpY2UuQnFTdGF0dXNTZXJ2aWNlJFJldHJpZXZlU3RhdHVzUmVxdWVzdFxuICAgICAgICAgICAgY29udGVudC10eXBlLWZvcm1hdDoganNvblxuICAgICAgLSB0bzpcbiAgICAgICAgICB1cmk6IGdycGM6Ly97e21lcmN1cnkuYmluZGluZy5zZXJ2aWNlLmhvc3R9fTp7e21lcmN1cnkuYmluZGluZy5zZXJ2aWNlLnBvcnR9fS9jb20ucmVkaGF0Lm1lcmN1cnkucGFydHlyb3V0aW5ncHJvZmlsZS52MTAuYXBpLmJxc3RhdHVzc2VydmljZS5CUVN0YXR1c1NlcnZpY2U/c3luY2hyb25vdXM9dHJ1ZVx1MDAyNm1ldGhvZD1SZXRyaWV2ZVN0YXR1c1xuICAgICAgLSBtYXJzaGFsOlxuICAgICAgICAgIHByb3RvYnVmOlxuICAgICAgICAgICAgaW5zdGFuY2UtY2xhc3M6IGNvbS5yZWRoYXQubWVyY3VyeS5wYXJ0eXJvdXRpbmdwcm9maWxlLnYxMC5SZXRyaWV2ZVN0YXR1c1Jlc3BvbnNlT3V0ZXJDbGFzcyRSZXRyaWV2ZVN0YXR1c1Jlc3BvbnNlXG4gICAgICAgICAgICBjb250ZW50LXR5cGUtZm9ybWF0OiBqc29uIn0sImtpbmQiOiJDb25maWdNYXAiLCJtZXRhZGF0YSI6eyJuYW1lIjoiaW50ZWdyYXRpb24tcGFydHktcm91dGluZy1wcm9maWxlLWh0dHAifX0=
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsibmFtZSI6InNlcnZpY2Vkb21haW5jbHVzdGVycy5tZXJjdXJ5LnJlZGhhdC5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibWVyY3VyeS5yZWRoYXQuaW8iLCJuYW1lcyI6eyJraW5kIjoiU2VydmljZURvbWFpbkNsdXN0ZXIiLCJwbHVyYWwiOiJzZXJ2aWNlZG9tYWluY2x1c3RlcnMiLCJzaG9ydE5hbWVzIjpbInNkYyJdLCJzaW5ndWxhciI6InNlcnZpY2Vkb21haW5jbHVzdGVyIn0sInNjb3BlIjoiTmFtZXNwYWNlZCIsInZlcnNpb25zIjpbeyJuYW1lIjoidjFhbHBoYTEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7InByb3BlcnRpZXMiOnsic3BlYyI6eyJwcm9wZXJ0aWVzIjp7ImthZmthIjp7InByb3BlcnRpZXMiOnsicmVwbGljYXMiOnsidHlwZSI6ImludGVnZXIifSwic3RvcmFnZSI6eyJwcm9wZXJ0aWVzIjp7InNpemUiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7InByb3BlcnRpZXMiOnsiZXJyb3IiOnsidHlwZSI6InN0cmluZyJ9LCJrYWZrYUJyb2tlciI6eyJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsibmFtZSI6InNlcnZpY2Vkb21haW5zLm1lcmN1cnkucmVkaGF0LmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtZXJjdXJ5LnJlZGhhdC5pbyIsIm5hbWVzIjp7ImtpbmQiOiJTZXJ2aWNlRG9tYWluIiwicGx1cmFsIjoic2VydmljZWRvbWFpbnMiLCJzaG9ydE5hbWVzIjpbInNkciJdLCJzaW5ndWxhciI6InNlcnZpY2Vkb21haW4ifSwic2NvcGUiOiJOYW1lc3BhY2VkIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MWFscGhhMSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsicHJvcGVydGllcyI6eyJzcGVjIjp7InByb3BlcnRpZXMiOnsiYmluZGluZyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7ImVuZHBvaW50Ijp7InR5cGUiOiJzdHJpbmcifSwiZW52Ijp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJ2YWx1ZSI6eyJ0eXBlIjoic3RyaW5nIn0sInZhbHVlRnJvbSI6eyJwcm9wZXJ0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6Im9iamVjdCJ9LCJjb25maWdNYXBLZXlSZWYiOnsicHJvcGVydGllcyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwia2V5Ijp7InR5cGUiOiJzdHJpbmcifSwibmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7InR5cGUiOiJib29sZWFuIn19LCJ0eXBlIjoib2JqZWN0In0sImZpZWxkUmVmIjp7InByb3BlcnRpZXMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sImFwaVZlcnNpb24iOnsidHlwZSI6InN0cmluZyJ9LCJmaWVsZFBhdGgiOnsidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJyZXNvdXJjZUZpZWxkUmVmIjp7InByb3BlcnRpZXMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sImNvbnRhaW5lck5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJkaXZpc29yIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJyZXNvdXJjZSI6eyJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInNlY3JldEtleVJlZiI6eyJwcm9wZXJ0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6Im9iamVjdCJ9LCJrZXkiOnsidHlwZSI6InN0cmluZyJ9LCJuYW1lIjp7InR5cGUiOiJzdHJpbmcifSwib3B0aW9uYWwiOnsidHlwZSI6ImJvb2xlYW4ifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwiYnVzaW5lc3NJbWFnZSI6eyJ0eXBlIjoic3RyaW5nIn0sImV4cG9zZSI6eyJpdGVtcyI6eyJlbnVtIjpbImh0dHAiXSwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VydmljZURvbWFpbkNsdXN0ZXIiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7ImVudW0iOlsiUGFydHlSb3V0aW5nUHJvZmlsZSIsIkN1c3RvbWVyT2ZmZXIiLCJDdXN0b21lckNyZWRpdFJhdGluZyJdLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJwcm9wZXJ0aWVzIjp7ImVycm9yIjp7InR5cGUiOiJzdHJpbmcifSwia2Fma2FUb3BpYyI6eyJ0eXBlIjoic3RyaW5nIn0sImthZmthVXNlciI6eyJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfX0=
relatedImages:
- image: quay.io/ecosystem-appeng/mercury-bundle:1.0.1-SNAPSHOT
  name: ""
schema: olm.bundle
---
schema: olm.channel
package: mercury-operator
name: preview
entries:
  - name: mercury-operator.1.0.1
