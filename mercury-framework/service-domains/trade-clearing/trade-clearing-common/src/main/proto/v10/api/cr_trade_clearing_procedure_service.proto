/*
  Trade Clearing

  This Service Domain handles the back office processes that confirm and notify interested parties that securities and funds are available as traded in anticipation of settlement processing

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.tradeclearing.v10.api.crtradeclearingprocedureservice;

import "google/protobuf/empty.proto";
import public "v10/model/control_trade_clearing_procedure_request.proto";
import public "v10/model/control_trade_clearing_procedure_response.proto";
import public "v10/model/exchange_trade_clearing_procedure_request.proto";
import public "v10/model/exchange_trade_clearing_procedure_response.proto";
import public "v10/model/execute_trade_clearing_procedure_request.proto";
import public "v10/model/execute_trade_clearing_procedure_response.proto";
import public "v10/model/http_error.proto";
import public "v10/model/initiate_trade_clearing_procedure_request.proto";
import public "v10/model/initiate_trade_clearing_procedure_response.proto";
import public "v10/model/notify_trade_clearing_procedure_response.proto";
import public "v10/model/request_trade_clearing_procedure_request.proto";
import public "v10/model/request_trade_clearing_procedure_response.proto";
import public "v10/model/retrieve_trade_clearing_procedure_response.proto";
import public "v10/model/update_trade_clearing_procedure_request.proto";
import public "v10/model/update_trade_clearing_procedure_response.proto";

service CRTradeClearingProcedureService {
  rpc Control (ControlRequest) returns (ControlTradeClearingProcedureResponse);

  rpc Exchange (ExchangeRequest) returns (ExchangeTradeClearingProcedureResponse);

  rpc Execute (ExecuteRequest) returns (ExecuteTradeClearingProcedureResponse);

  rpc Initiate (InitiateRequest) returns (InitiateTradeClearingProcedureResponse);

  rpc Notify (NotifyRequest) returns (NotifyTradeClearingProcedureResponse);

  rpc Request (RequestRequest) returns (RequestTradeClearingProcedureResponse);

  rpc Retrieve (RetrieveRequest) returns (RetrieveTradeClearingProcedureResponse);

  rpc Update (UpdateRequest) returns (UpdateTradeClearingProcedureResponse);

}

message ControlRequest {
  string tradeclearingId = 1;
  ControlTradeClearingProcedureRequest controlTradeClearingProcedureRequest = 2;

}

message ExchangeRequest {
  string tradeclearingId = 1;
  ExchangeTradeClearingProcedureRequest exchangeTradeClearingProcedureRequest = 2;

}

message ExecuteRequest {
  string tradeclearingId = 1;
  ExecuteTradeClearingProcedureRequest executeTradeClearingProcedureRequest = 2;

}

message InitiateRequest {
  InitiateTradeClearingProcedureRequest initiateTradeClearingProcedureRequest = 1;

}

message NotifyRequest {
  string tradeclearingId = 1;

}

message RequestRequest {
  string tradeclearingId = 1;
  RequestTradeClearingProcedureRequest requestTradeClearingProcedureRequest = 2;

}

message RetrieveRequest {
  string tradeclearingId = 1;

}

message UpdateRequest {
  string tradeclearingId = 1;
  UpdateTradeClearingProcedureRequest updateTradeClearingProcedureRequest = 2;

}

