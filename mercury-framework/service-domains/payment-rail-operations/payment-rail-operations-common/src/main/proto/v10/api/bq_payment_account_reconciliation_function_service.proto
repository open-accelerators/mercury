/*
  Payment Rail Operations

  This Service Domain handles the operational interface with payment service providers, formatting outbound transactions and onward routing inbound transactions during scheduled operating sessions. It also links to holding account facilities for net payment handling

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.paymentrailoperations.v10.api.bqpaymentaccountreconciliationfunctionservice;

import "google/protobuf/empty.proto";
import public "v10/model/http_error.proto";
import public "v10/model/payment_account_reconciliation_function.proto";

service BQPaymentAccountReconciliationFunctionService {
  rpc ExchangePaymentAccountReconciliationFunction (ExchangePaymentAccountReconciliationFunctionRequest) returns (PaymentAccountReconciliationFunction);

  rpc ExecutePaymentAccountReconciliationFunction (ExecutePaymentAccountReconciliationFunctionRequest) returns (PaymentAccountReconciliationFunction);

  rpc InitiatePaymentAccountReconciliationFunction (InitiatePaymentAccountReconciliationFunctionRequest) returns (PaymentAccountReconciliationFunction);

  rpc NotifyPaymentAccountReconciliationFunction (NotifyPaymentAccountReconciliationFunctionRequest) returns (PaymentAccountReconciliationFunction);

  rpc RequestPaymentAccountReconciliationFunction (RequestPaymentAccountReconciliationFunctionRequest) returns (PaymentAccountReconciliationFunction);

  rpc RetrievePaymentAccountReconciliationFunction (RetrievePaymentAccountReconciliationFunctionRequest) returns (PaymentAccountReconciliationFunction);

  rpc UpdatePaymentAccountReconciliationFunction (UpdatePaymentAccountReconciliationFunctionRequest) returns (PaymentAccountReconciliationFunction);

}

message ExchangePaymentAccountReconciliationFunctionRequest {
  string paymentrailoperationsId = 1;
  string paymentaccountreconciliationfunctionId = 2;
  PaymentAccountReconciliationFunction paymentAccountReconciliationFunction = 3;

}

message ExecutePaymentAccountReconciliationFunctionRequest {
  string paymentrailoperationsId = 1;
  string paymentaccountreconciliationfunctionId = 2;
  PaymentAccountReconciliationFunction paymentAccountReconciliationFunction = 3;

}

message InitiatePaymentAccountReconciliationFunctionRequest {
  string paymentrailoperationsId = 1;
  PaymentAccountReconciliationFunction paymentAccountReconciliationFunction = 2;

}

message NotifyPaymentAccountReconciliationFunctionRequest {
  string paymentrailoperationsId = 1;
  string paymentaccountreconciliationfunctionId = 2;

}

message RequestPaymentAccountReconciliationFunctionRequest {
  string paymentrailoperationsId = 1;
  string paymentaccountreconciliationfunctionId = 2;
  PaymentAccountReconciliationFunction paymentAccountReconciliationFunction = 3;

}

message RetrievePaymentAccountReconciliationFunctionRequest {
  string paymentrailoperationsId = 1;
  string paymentaccountreconciliationfunctionId = 2;

}

message UpdatePaymentAccountReconciliationFunctionRequest {
  string paymentrailoperationsId = 1;
  string paymentaccountreconciliationfunctionId = 2;
  PaymentAccountReconciliationFunction paymentAccountReconciliationFunction = 3;

}

