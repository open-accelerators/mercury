/*
  Branch Currency Management

  Track cash inventory, project demand and ensure all cash is accounted for within the branch

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.branchcurrencymanagement.v10.api.crbranchcashallocationservice;

import "google/protobuf/empty.proto";
import public "v10/model/capture_branch_cash_allocation_request.proto";
import public "v10/model/capture_branch_cash_allocation_response.proto";
import public "v10/model/control_branch_cash_allocation_request.proto";
import public "v10/model/control_branch_cash_allocation_response.proto";
import public "v10/model/exchange_branch_cash_allocation_request.proto";
import public "v10/model/exchange_branch_cash_allocation_response.proto";
import public "v10/model/http_error.proto";
import public "v10/model/initiate_branch_cash_allocation_request.proto";
import public "v10/model/initiate_branch_cash_allocation_response.proto";
import public "v10/model/retrieve_branch_cash_allocation_response.proto";
import public "v10/model/update_branch_cash_allocation_request.proto";
import public "v10/model/update_branch_cash_allocation_response.proto";

service CRBranchCashAllocationService {
  rpc Capture (CaptureRequest) returns (CaptureBranchCashAllocationResponse);

  rpc Control (ControlRequest) returns (ControlBranchCashAllocationResponse);

  rpc Exchange (ExchangeRequest) returns (ExchangeBranchCashAllocationResponse);

  rpc Initiate (InitiateRequest) returns (InitiateBranchCashAllocationResponse);

  rpc Retrieve (RetrieveRequest) returns (RetrieveBranchCashAllocationResponse);

  rpc Update (UpdateRequest) returns (UpdateBranchCashAllocationResponse);

}

message CaptureRequest {
  string branchcurrencymanagementId = 1;
  CaptureBranchCashAllocationRequest captureBranchCashAllocationRequest = 2;

}

message ControlRequest {
  string branchcurrencymanagementId = 1;
  ControlBranchCashAllocationRequest controlBranchCashAllocationRequest = 2;

}

message ExchangeRequest {
  string branchcurrencymanagementId = 1;
  ExchangeBranchCashAllocationRequest exchangeBranchCashAllocationRequest = 2;

}

message InitiateRequest {
  InitiateBranchCashAllocationRequest initiateBranchCashAllocationRequest = 1;

}

message RetrieveRequest {
  string branchcurrencymanagementId = 1;

}

message UpdateRequest {
  string branchcurrencymanagementId = 1;
  UpdateBranchCashAllocationRequest updateBranchCashAllocationRequest = 2;

}

