/*
  Notional Pooling

  Notional pooling allows corporate customer with multiple active accounts to pool credit and debit balances to provide a single centralized liquidity position and to minimize interest expense, simplify cash management and retain a degree of local autonomy to the accounts

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.notionalpooling.v10.api.bqnotionalaccountarrangementfulfillmentservice;

import "google/protobuf/empty.proto";
import public "v10/model/http_error.proto";
import public "v10/model/notional_account_arrangement_fulfillment.proto";

service BQNotionalAccountArrangementFulfillmentService {
  rpc ExchangeNotionalAccountArrangementFulfillment (ExchangeNotionalAccountArrangementFulfillmentRequest) returns (NotionalAccountArrangementFulfillment);

  rpc ExecuteNotionalAccountArrangementFulfillment (ExecuteNotionalAccountArrangementFulfillmentRequest) returns (NotionalAccountArrangementFulfillment);

  rpc InitiateNotionalAccountArrangementFulfillment (InitiateNotionalAccountArrangementFulfillmentRequest) returns (NotionalAccountArrangementFulfillment);

  rpc NotifyNotionalAccountArrangementFulfillment (NotifyNotionalAccountArrangementFulfillmentRequest) returns (NotionalAccountArrangementFulfillment);

  rpc RequestNotionalAccountArrangementFulfillment (RequestNotionalAccountArrangementFulfillmentRequest) returns (NotionalAccountArrangementFulfillment);

  rpc RetrieveNotionalAccountArrangementFulfillment (RetrieveNotionalAccountArrangementFulfillmentRequest) returns (NotionalAccountArrangementFulfillment);

  rpc UpdateNotionalAccountArrangementFulfillment (UpdateNotionalAccountArrangementFulfillmentRequest) returns (NotionalAccountArrangementFulfillment);

}

message ExchangeNotionalAccountArrangementFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountarrangementfulfillmentId = 2;
  NotionalAccountArrangementFulfillment notionalAccountArrangementFulfillment = 3;

}

message ExecuteNotionalAccountArrangementFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountarrangementfulfillmentId = 2;
  NotionalAccountArrangementFulfillment notionalAccountArrangementFulfillment = 3;

}

message InitiateNotionalAccountArrangementFulfillmentRequest {
  string notionalpoolingId = 1;
  NotionalAccountArrangementFulfillment notionalAccountArrangementFulfillment = 2;

}

message NotifyNotionalAccountArrangementFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountarrangementfulfillmentId = 2;

}

message RequestNotionalAccountArrangementFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountarrangementfulfillmentId = 2;
  NotionalAccountArrangementFulfillment notionalAccountArrangementFulfillment = 3;

}

message RetrieveNotionalAccountArrangementFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountarrangementfulfillmentId = 2;

}

message UpdateNotionalAccountArrangementFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountarrangementfulfillmentId = 2;
  NotionalAccountArrangementFulfillment notionalAccountArrangementFulfillment = 3;

}

