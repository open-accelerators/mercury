/*
  Notional Pooling

  Notional pooling allows corporate customer with multiple active accounts to pool credit and debit balances to provide a single centralized liquidity position and to minimize interest expense, simplify cash management and retain a degree of local autonomy to the accounts

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.notionalpooling.v10.api.bqnotionalaccountinterestallocationfulfillmentservice;

import "google/protobuf/empty.proto";
import public "v10/model/http_error.proto";
import public "v10/model/notional_account_interest_allocation_fulfillment.proto";

service BQNotionalAccountInterestAllocationFulfillmentService {
  rpc ExchangeNotionalAccountInterestAllocationFulfillment (ExchangeNotionalAccountInterestAllocationFulfillmentRequest) returns (NotionalAccountInterestAllocationFulfillment);

  rpc ExecuteNotionalAccountInterestAllocationFulfillment (ExecuteNotionalAccountInterestAllocationFulfillmentRequest) returns (NotionalAccountInterestAllocationFulfillment);

  rpc InitiateNotionalAccountInterestAllocationFulfillment (InitiateNotionalAccountInterestAllocationFulfillmentRequest) returns (NotionalAccountInterestAllocationFulfillment);

  rpc NotifyNotionalAccountInterestAllocationFulfillment (NotifyNotionalAccountInterestAllocationFulfillmentRequest) returns (NotionalAccountInterestAllocationFulfillment);

  rpc RequestNotionalAccountInterestAllocationFulfillment (RequestNotionalAccountInterestAllocationFulfillmentRequest) returns (NotionalAccountInterestAllocationFulfillment);

  rpc RetrieveNotionalAccountInterestAllocationFulfillment (RetrieveNotionalAccountInterestAllocationFulfillmentRequest) returns (NotionalAccountInterestAllocationFulfillment);

  rpc UpdateNotionalAccountInterestAllocationFulfillment (UpdateNotionalAccountInterestAllocationFulfillmentRequest) returns (NotionalAccountInterestAllocationFulfillment);

}

message ExchangeNotionalAccountInterestAllocationFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountinterestallocationfulfillmentId = 2;
  NotionalAccountInterestAllocationFulfillment notionalAccountInterestAllocationFulfillment = 3;

}

message ExecuteNotionalAccountInterestAllocationFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountinterestallocationfulfillmentId = 2;
  NotionalAccountInterestAllocationFulfillment notionalAccountInterestAllocationFulfillment = 3;

}

message InitiateNotionalAccountInterestAllocationFulfillmentRequest {
  string notionalpoolingId = 1;
  NotionalAccountInterestAllocationFulfillment notionalAccountInterestAllocationFulfillment = 2;

}

message NotifyNotionalAccountInterestAllocationFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountinterestallocationfulfillmentId = 2;

}

message RequestNotionalAccountInterestAllocationFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountinterestallocationfulfillmentId = 2;
  NotionalAccountInterestAllocationFulfillment notionalAccountInterestAllocationFulfillment = 3;

}

message RetrieveNotionalAccountInterestAllocationFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountinterestallocationfulfillmentId = 2;

}

message UpdateNotionalAccountInterestAllocationFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountinterestallocationfulfillmentId = 2;
  NotionalAccountInterestAllocationFulfillment notionalAccountInterestAllocationFulfillment = 3;

}

