/*
  Notional Pooling

  Notional pooling allows corporate customer with multiple active accounts to pool credit and debit balances to provide a single centralized liquidity position and to minimize interest expense, simplify cash management and retain a degree of local autonomy to the accounts

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.notionalpooling.v10.api.bqnotionalaccountconsolidatedpositionfulfillmentservice;

import "google/protobuf/empty.proto";
import public "v10/model/http_error.proto";
import public "v10/model/notional_account_consolidated_position_fulfillment.proto";

service BQNotionalAccountConsolidatedPositionFulfillmentService {
  rpc ExchangeNotionalAccountConsolidatedPositionFulfillment (ExchangeNotionalAccountConsolidatedPositionFulfillmentRequest) returns (NotionalAccountConsolidatedPositionFulfillment);

  rpc ExecuteNotionalAccountConsolidatedPositionFulfillment (ExecuteNotionalAccountConsolidatedPositionFulfillmentRequest) returns (NotionalAccountConsolidatedPositionFulfillment);

  rpc InitiateNotionalAccountConsolidatedPositionFulfillment (InitiateNotionalAccountConsolidatedPositionFulfillmentRequest) returns (NotionalAccountConsolidatedPositionFulfillment);

  rpc NotifyNotionalAccountConsolidatedPositionFulfillment (NotifyNotionalAccountConsolidatedPositionFulfillmentRequest) returns (NotionalAccountConsolidatedPositionFulfillment);

  rpc RequestNotionalAccountConsolidatedPositionFulfillment (RequestNotionalAccountConsolidatedPositionFulfillmentRequest) returns (NotionalAccountConsolidatedPositionFulfillment);

  rpc RetrieveNotionalAccountConsolidatedPositionFulfillment (RetrieveNotionalAccountConsolidatedPositionFulfillmentRequest) returns (NotionalAccountConsolidatedPositionFulfillment);

  rpc UpdateNotionalAccountConsolidatedPositionFulfillment (UpdateNotionalAccountConsolidatedPositionFulfillmentRequest) returns (NotionalAccountConsolidatedPositionFulfillment);

}

message ExchangeNotionalAccountConsolidatedPositionFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountconsolidatedpositionfulfillmentId = 2;
  NotionalAccountConsolidatedPositionFulfillment notionalAccountConsolidatedPositionFulfillment = 3;

}

message ExecuteNotionalAccountConsolidatedPositionFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountconsolidatedpositionfulfillmentId = 2;
  NotionalAccountConsolidatedPositionFulfillment notionalAccountConsolidatedPositionFulfillment = 3;

}

message InitiateNotionalAccountConsolidatedPositionFulfillmentRequest {
  string notionalpoolingId = 1;
  NotionalAccountConsolidatedPositionFulfillment notionalAccountConsolidatedPositionFulfillment = 2;

}

message NotifyNotionalAccountConsolidatedPositionFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountconsolidatedpositionfulfillmentId = 2;

}

message RequestNotionalAccountConsolidatedPositionFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountconsolidatedpositionfulfillmentId = 2;
  NotionalAccountConsolidatedPositionFulfillment notionalAccountConsolidatedPositionFulfillment = 3;

}

message RetrieveNotionalAccountConsolidatedPositionFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountconsolidatedpositionfulfillmentId = 2;

}

message UpdateNotionalAccountConsolidatedPositionFulfillmentRequest {
  string notionalpoolingId = 1;
  string notionalaccountconsolidatedpositionfulfillmentId = 2;
  NotionalAccountConsolidatedPositionFulfillment notionalAccountConsolidatedPositionFulfillment = 3;

}

