/*
  Notional Pooling

  Notional pooling allows corporate customer with multiple active accounts to pool credit and debit balances to provide a single centralized liquidity position and to minimize interest expense, simplify cash management and retain a degree of local autonomy to the accounts

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.notionalpooling.v10.api.crnotionalpoolingfacilityservice;

import "google/protobuf/empty.proto";
import public "v10/model/http_error.proto";
import public "v10/model/notional_pooling_facility.proto";

service CRNotionalPoolingFacilityService {
  rpc Control (ControlRequest) returns (NotionalPoolingFacility);

  rpc Exchange (ExchangeRequest) returns (NotionalPoolingFacility);

  rpc Execute (ExecuteRequest) returns (NotionalPoolingFacility);

  rpc Initiate (InitiateRequest) returns (NotionalPoolingFacility);

  rpc Notify (NotifyRequest) returns (NotionalPoolingFacility);

  rpc Request (RequestRequest) returns (NotionalPoolingFacility);

  rpc Retrieve (RetrieveRequest) returns (NotionalPoolingFacility);

  rpc Update (UpdateRequest) returns (NotionalPoolingFacility);

}

message ControlRequest {
  string notionalpoolingId = 1;
  NotionalPoolingFacility notionalPoolingFacility = 2;

}

message ExchangeRequest {
  string notionalpoolingId = 1;
  NotionalPoolingFacility notionalPoolingFacility = 2;

}

message ExecuteRequest {
  string notionalpoolingId = 1;
  NotionalPoolingFacility notionalPoolingFacility = 2;

}

message InitiateRequest {
  NotionalPoolingFacility notionalPoolingFacility = 1;

}

message NotifyRequest {
  string notionalpoolingId = 1;

}

message RequestRequest {
  string notionalpoolingId = 1;
  NotionalPoolingFacility notionalPoolingFacility = 2;

}

message RetrieveRequest {
  string notionalpoolingId = 1;

}

message UpdateRequest {
  string notionalpoolingId = 1;
  NotionalPoolingFacility notionalPoolingFacility = 2;

}

