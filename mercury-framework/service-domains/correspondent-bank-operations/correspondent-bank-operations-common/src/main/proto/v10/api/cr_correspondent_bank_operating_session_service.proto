/*
  Correspondent Bank Operations

  This service domain fulfils correspondent banking arrangements between the bank and its correspondent banking partners. &nbsp;This includes handling the clearing and settlement of payments to/from the correspondent banks, typically using the SWIFT payment network.

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.correspondentbankoperations.v10.api.crcorrespondentbankoperatingsessionservice;

import "google/protobuf/empty.proto";
import public "v10/model/exchange_correspondent_bank_operating_session_request.proto";
import public "v10/model/exchange_correspondent_bank_operating_session_response.proto";
import public "v10/model/execute_correspondent_bank_operating_session_request.proto";
import public "v10/model/execute_correspondent_bank_operating_session_response.proto";
import public "v10/model/http_error.proto";
import public "v10/model/initiate_correspondent_bank_operating_session_request.proto";
import public "v10/model/initiate_correspondent_bank_operating_session_response.proto";
import public "v10/model/notify_correspondent_bank_operating_session_response.proto";
import public "v10/model/request_correspondent_bank_operating_session_request.proto";
import public "v10/model/request_correspondent_bank_operating_session_response.proto";
import public "v10/model/retrieve_correspondent_bank_operating_session_response.proto";
import public "v10/model/update_correspondent_bank_operating_session_request.proto";
import public "v10/model/update_correspondent_bank_operating_session_response.proto";

service CRCorrespondentBankOperatingSessionService {
  rpc Exchange (ExchangeRequest) returns (ExchangeCorrespondentBankOperatingSessionResponse);

  rpc Execute (ExecuteRequest) returns (ExecuteCorrespondentBankOperatingSessionResponse);

  rpc Initiate (InitiateRequest) returns (InitiateCorrespondentBankOperatingSessionResponse);

  rpc Notify (NotifyRequest) returns (NotifyCorrespondentBankOperatingSessionResponse);

  rpc Request (RequestRequest) returns (RequestCorrespondentBankOperatingSessionResponse);

  rpc Retrieve (RetrieveRequest) returns (RetrieveCorrespondentBankOperatingSessionResponse);

  rpc Update (UpdateRequest) returns (UpdateCorrespondentBankOperatingSessionResponse);

}

message ExchangeRequest {
  string correspondentbankoperationsId = 1;
  ExchangeCorrespondentBankOperatingSessionRequest exchangeCorrespondentBankOperatingSessionRequest = 2;

}

message ExecuteRequest {
  string correspondentbankoperationsId = 1;
  ExecuteCorrespondentBankOperatingSessionRequest executeCorrespondentBankOperatingSessionRequest = 2;

}

message InitiateRequest {
  InitiateCorrespondentBankOperatingSessionRequest initiateCorrespondentBankOperatingSessionRequest = 1;

}

message NotifyRequest {
  string correspondentbankoperationsId = 1;

}

message RequestRequest {
  string correspondentbankoperationsId = 1;
  RequestCorrespondentBankOperatingSessionRequest requestCorrespondentBankOperatingSessionRequest = 2;

}

message RetrieveRequest {
  string correspondentbankoperationsId = 1;

}

message UpdateRequest {
  string correspondentbankoperationsId = 1;
  UpdateCorrespondentBankOperatingSessionRequest updateCorrespondentBankOperatingSessionRequest = 2;

}

