/*
  Correspondent Bank Operations

  This service domain fulfils correspondent banking arrangements between the bank and its correspondent banking partners. &nbsp;This includes handling the clearing and settlement of payments to/from the correspondent banks, typically using the SWIFT payment network.

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.correspondentbankoperations.v10.api.bqinboundpaymentsservice;

import "google/protobuf/empty.proto";
import public "v10/model/exchange_inbound_payments_request.proto";
import public "v10/model/exchange_inbound_payments_response.proto";
import public "v10/model/execute_inbound_payments_request.proto";
import public "v10/model/http_error.proto";
import public "v10/model/initiate_inbound_payments_request.proto";
import public "v10/model/initiate_inbound_payments_response.proto";
import public "v10/model/notify_inbound_payments_response.proto";
import public "v10/model/request_inbound_payments_request.proto";
import public "v10/model/request_inbound_payments_response.proto";
import public "v10/model/retrieve_inbound_payments_response.proto";
import public "v10/model/update_inbound_payments_request.proto";
import public "v10/model/update_inbound_payments_response.proto";

service BQInboundPaymentsService {
  rpc ExchangeInboundPayments (ExchangeInboundPaymentsRequest) returns (ExchangeInboundPaymentsResponse);

  rpc ExecuteInboundPayments (ExecuteInboundPaymentsRequest) returns (ExecuteInboundPaymentsResponse);

  rpc InitiateInboundPayments (InitiateInboundPaymentsRequest) returns (InitiateInboundPaymentsResponse);

  rpc NotifyInboundPayments (NotifyInboundPaymentsRequest) returns (NotifyInboundPaymentsResponse);

  rpc RequestInboundPayments (RequestInboundPaymentsRequest) returns (RequestInboundPaymentsResponse);

  rpc RetrieveInboundPayments (RetrieveInboundPaymentsRequest) returns (RetrieveInboundPaymentsResponse);

  rpc UpdateInboundPayments (UpdateInboundPaymentsRequest) returns (UpdateInboundPaymentsResponse);

}

message ExchangeInboundPaymentsRequest {
  string correspondentbankoperationsId = 1;
  string inboundpaymentsId = 2;
  ExchangeInboundPaymentsRequest exchangeInboundPaymentsRequest = 3;

}

message ExecuteInboundPaymentsRequest {
  string correspondentbankoperationsId = 1;
  string inboundpaymentsId = 2;
  ExecuteInboundPaymentsRequest executeInboundPaymentsRequest = 3;

}

message ExecuteInboundPaymentsResponse {
  bool data = 1;
}

message InitiateInboundPaymentsRequest {
  string correspondentbankoperationsId = 1;
  InitiateInboundPaymentsRequest initiateInboundPaymentsRequest = 2;

}

message NotifyInboundPaymentsRequest {
  string correspondentbankoperationsId = 1;
  string inboundpaymentsId = 2;

}

message RequestInboundPaymentsRequest {
  string correspondentbankoperationsId = 1;
  string inboundpaymentsId = 2;
  RequestInboundPaymentsRequest requestInboundPaymentsRequest = 3;

}

message RetrieveInboundPaymentsRequest {
  string correspondentbankoperationsId = 1;
  string inboundpaymentsId = 2;

}

message UpdateInboundPaymentsRequest {
  string correspondentbankoperationsId = 1;
  string inboundpaymentsId = 2;
  UpdateInboundPaymentsRequest updateInboundPaymentsRequest = 3;

}

