/*
  Securities Fails Processing

  This Service Domain handles the resolution of clerical and processing errors that lead to failures in the securities trade clearing and settlement processes

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.securitiesfailsprocessing.v10.api.crsecuritytradingfailsprocedureservice;

import "google/protobuf/empty.proto";
import public "v10/model/control_security_trading_fails_procedure_request.proto";
import public "v10/model/control_security_trading_fails_procedure_response.proto";
import public "v10/model/exchange_security_trading_fails_procedure_request.proto";
import public "v10/model/exchange_security_trading_fails_procedure_response.proto";
import public "v10/model/execute_security_trading_fails_procedure_request.proto";
import public "v10/model/execute_security_trading_fails_procedure_response.proto";
import public "v10/model/http_error.proto";
import public "v10/model/initiate_security_trading_fails_procedure_request.proto";
import public "v10/model/initiate_security_trading_fails_procedure_response.proto";
import public "v10/model/notify_security_trading_fails_procedure_response.proto";
import public "v10/model/request_security_trading_fails_procedure_request.proto";
import public "v10/model/request_security_trading_fails_procedure_response.proto";
import public "v10/model/retrieve_security_trading_fails_procedure_response.proto";
import public "v10/model/update_security_trading_fails_procedure_request.proto";
import public "v10/model/update_security_trading_fails_procedure_response.proto";

service CRSecurityTradingFailsProcedureService {
  rpc Control (ControlRequest) returns (ControlSecurityTradingFailsProcedureResponse);

  rpc Exchange (ExchangeRequest) returns (ExchangeSecurityTradingFailsProcedureResponse);

  rpc Execute (ExecuteRequest) returns (ExecuteSecurityTradingFailsProcedureResponse);

  rpc Initiate (InitiateRequest) returns (InitiateSecurityTradingFailsProcedureResponse);

  rpc Notify (NotifyRequest) returns (NotifySecurityTradingFailsProcedureResponse);

  rpc Request (RequestRequest) returns (RequestSecurityTradingFailsProcedureResponse);

  rpc Retrieve (RetrieveRequest) returns (RetrieveSecurityTradingFailsProcedureResponse);

  rpc Update (UpdateRequest) returns (UpdateSecurityTradingFailsProcedureResponse);

}

message ControlRequest {
  string securitiesfailsprocessingId = 1;
  ControlSecurityTradingFailsProcedureRequest controlSecurityTradingFailsProcedureRequest = 2;

}

message ExchangeRequest {
  string securitiesfailsprocessingId = 1;
  ExchangeSecurityTradingFailsProcedureRequest exchangeSecurityTradingFailsProcedureRequest = 2;

}

message ExecuteRequest {
  string securitiesfailsprocessingId = 1;
  ExecuteSecurityTradingFailsProcedureRequest executeSecurityTradingFailsProcedureRequest = 2;

}

message InitiateRequest {
  InitiateSecurityTradingFailsProcedureRequest initiateSecurityTradingFailsProcedureRequest = 1;

}

message NotifyRequest {
  string securitiesfailsprocessingId = 1;

}

message RequestRequest {
  string securitiesfailsprocessingId = 1;
  RequestSecurityTradingFailsProcedureRequest requestSecurityTradingFailsProcedureRequest = 2;

}

message RetrieveRequest {
  string securitiesfailsprocessingId = 1;

}

message UpdateRequest {
  string securitiesfailsprocessingId = 1;
  UpdateSecurityTradingFailsProcedureRequest updateSecurityTradingFailsProcedureRequest = 2;

}

