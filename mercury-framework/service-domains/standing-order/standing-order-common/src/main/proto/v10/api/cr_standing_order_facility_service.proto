/*
  Standing Order

  Customers can issue standing orders to the bank. In most cases this is for the execution of a periodical payment, but there are other standing instructions like, sweeping balances at end of month, topping off excess funds for a current account, etc.

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.standingorder.v10.api.crstandingorderfacilityservice;

import "google/protobuf/empty.proto";
import public "v10/model/control_standing_order_facility_request.proto";
import public "v10/model/control_standing_order_facility_response.proto";
import public "v10/model/exchange_standing_order_facility_request.proto";
import public "v10/model/exchange_standing_order_facility_response.proto";
import public "v10/model/execute_standing_order_facility_request.proto";
import public "v10/model/execute_standing_order_facility_response.proto";
import public "v10/model/http_error.proto";
import public "v10/model/initiate_standing_order_facility_request.proto";
import public "v10/model/initiate_standing_order_facility_response.proto";
import public "v10/model/request_standing_order_facility_request.proto";
import public "v10/model/request_standing_order_facility_response.proto";
import public "v10/model/retrieve_standing_order_facility_response.proto";
import public "v10/model/update_standing_order_facility_request.proto";
import public "v10/model/update_standing_order_facility_response.proto";

service CRStandingOrderFacilityService {
  rpc Control (ControlRequest) returns (ControlStandingOrderFacilityResponse);

  rpc Exchange (ExchangeRequest) returns (ExchangeStandingOrderFacilityResponse);

  rpc Execute (ExecuteRequest) returns (ExecuteStandingOrderFacilityResponse);

  rpc Initiate (InitiateRequest) returns (InitiateStandingOrderFacilityResponse);

  rpc Request (RequestRequest) returns (RequestStandingOrderFacilityResponse);

  rpc Retrieve (RetrieveRequest) returns (RetrieveStandingOrderFacilityResponse);

  rpc Update (UpdateRequest) returns (UpdateStandingOrderFacilityResponse);

}

message ControlRequest {
  string standingorderId = 1;
  ControlStandingOrderFacilityRequest controlStandingOrderFacilityRequest = 2;

}

message ExchangeRequest {
  string standingorderId = 1;
  ExchangeStandingOrderFacilityRequest exchangeStandingOrderFacilityRequest = 2;

}

message ExecuteRequest {
  string standingorderId = 1;
  ExecuteStandingOrderFacilityRequest executeStandingOrderFacilityRequest = 2;

}

message InitiateRequest {
  InitiateStandingOrderFacilityRequest initiateStandingOrderFacilityRequest = 1;

}

message RequestRequest {
  string standingorderId = 1;
  RequestStandingOrderFacilityRequest requestStandingOrderFacilityRequest = 2;

}

message RetrieveRequest {
  string standingorderId = 1;

}

message UpdateRequest {
  string standingorderId = 1;
  UpdateStandingOrderFacilityRequest updateStandingOrderFacilityRequest = 2;

}

