/*
  Transaction Authorization

  This service domain handles risk based authorization for interactive customer transactions. This combines the context (channel) transaction, customer details and recent activity analysis as appropriate. The authorization may require a specific level of party/customer authentication to get approval.

  The version of the OpenAPI document: 10.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package com.redhat.mercury.transactionauthorization.v10.api.crinteractivetransactionassessmentservice;

import "google/protobuf/empty.proto";
import public "v10/model/evaluate_interactive_transaction_assessment_request.proto";
import public "v10/model/evaluate_interactive_transaction_assessment_response.proto";
import public "v10/model/execute_interactive_transaction_assessment_request.proto";
import public "v10/model/execute_interactive_transaction_assessment_response.proto";
import public "v10/model/http_error.proto";
import public "v10/model/request_interactive_transaction_assessment_request.proto";
import public "v10/model/request_interactive_transaction_assessment_response.proto";
import public "v10/model/retrieve_interactive_transaction_assessment_response.proto";
import public "v10/model/update_interactive_transaction_assessment_request.proto";
import public "v10/model/update_interactive_transaction_assessment_response.proto";

service CRInteractiveTransactionAssessmentService {
  rpc Evaluate (EvaluateRequest) returns (EvaluateInteractiveTransactionAssessmentResponse);

  rpc Execute (ExecuteRequest) returns (ExecuteInteractiveTransactionAssessmentResponse);

  rpc Request (RequestRequest) returns (RequestInteractiveTransactionAssessmentResponse);

  rpc Retrieve (RetrieveRequest) returns (RetrieveInteractiveTransactionAssessmentResponse);

  rpc Update (UpdateRequest) returns (UpdateInteractiveTransactionAssessmentResponse);

}

message EvaluateRequest {
  EvaluateInteractiveTransactionAssessmentRequest evaluateInteractiveTransactionAssessmentRequest = 1;

}

message ExecuteRequest {
  string transactionauthorizationId = 1;
  ExecuteInteractiveTransactionAssessmentRequest executeInteractiveTransactionAssessmentRequest = 2;

}

message RequestRequest {
  string transactionauthorizationId = 1;
  RequestInteractiveTransactionAssessmentRequest requestInteractiveTransactionAssessmentRequest = 2;

}

message RetrieveRequest {
  string transactionauthorizationId = 1;

}

message UpdateRequest {
  string transactionauthorizationId = 1;
  UpdateInteractiveTransactionAssessmentRequest updateInteractiveTransactionAssessmentRequest = 2;

}

