#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

print_usage() {
  echo "
  Updates the version references found in the project. It can be used during maven-release-plugin
  in order to update the version at the same time using the release.properties file.

  If the maven-release-plugin is preparing the release (i.e. moving from 1.0.0-SNAPSHOT to 1.0.0) the
  target release will be the release version.

  If the maven-release-plugin is performing the release (i.e. moving from 1.0.0 to 1.0.1-SNAPSHOT) the
  target release will be the development version.

  The resources that will be updated are listed in the version-resources file.

  -s source-version             Set the source version. e.g. 1.0.0-SNAPSHOT
  -t target-version             Set the target version. e.g. 1.0.0.Final
  -p                            Use the release.properties file to guess the target version
  -d                            Set the debug flag
  -h                            Prints this message

  Examples:
  # Update from/to a specific version
  ./update-version.sh -s 1.0.0-SNAPSHOT -t 1.0.0

  # Update using the release.properties file generated by the maven-release-plugin
  ./update-version.sh -p -s 1.0.0-SNAPSHOT"
}

PROPS_FILE=""
SOURCE_VERSION=""
TARGET_VERSION=""

while getopts 'hdps:t:' flag; do
  case "${flag}" in
    s) SOURCE_VERSION="${OPTARG}" ;;
    t) TARGET_VERSION="${OPTARG}" ;;
    p) PROPS_FILE="$(pwd)/release.properties" ;;
    d) set -o xtrace ;;
    *) print_usage
       exit 1 ;;
  esac
done

dir_path=$(dirname $0)
VERSION_RESOURCES='version-resources'

if [ ! -z "$PROPS_FILE" ]
then
  if [ ! -f "$PROPS_FILE" ]
  then
    echo "missing ${PROPS_FILE}"
    exit 0
  fi
  declare -A props
  while read line; do
    if [[ $line = project.dev.com.redhat.mercury\:mercury-parent=* ]]
    then
      DEVELOPMENT_VERSION=${line##*=}
    fi
    if [[ $line = project.rel.com.redhat.mercury\:mercury-parent=* ]]
    then
      RELEASE_VERSION=${line##*=}
    fi
  done < $PROPS_FILE

  if [ $RELEASE_VERSION = $SOURCE_VERSION ]
  then
    TARGET_VERSION=$DEVELOPMENT_VERSION
  else
    TARGET_VERSION=$RELEASE_VERSION
  fi
fi

if [ -z "$SOURCE_VERSION" ]
then
  echo "Error: missing source version"
  exit 1
fi

if [ -z "$TARGET_VERSION" ]
then
  echo "Error: missing target version"
  exit 1
fi

replace () {
  path=$(dirname "$1")
  file_exp=$(basename "$1")
  for i in `find $path -name $file_exp`
  do
    sed -i 's/'${SOURCE_VERSION}'/'${TARGET_VERSION}'/' $i
  done
}

while read line
do
  if [[ $line != \#* ]]
  then
    replace "$line"
  fi
done < $dir_path/$VERSION_RESOURCES